# https://taskfile.dev

version: "3"

dotenv: [".env"]

vars:
  aws_account_id:
    sh: echo "{{.AWS_ACCOUNT_ID}}"
  domain_name:
    sh: echo "{{.TF_VAR_domain_name}}"
  image_version:
    sh: ./scripts/build_git_commit_sha.sh
  environment:
    sh: echo "{{.TF_VAR_environment}}"

tasks:
  ######################
  #     Top Level      #
  ######################

  apply:
    dir: tf
    cmds:
      - terraform apply

  refresh:
    dir: tf
    cmds:
      - terraform refresh

  destroy:
    dir: tf
    cmds:
      - terraform destroy

  destroy-auto-approve:
    dir: tf
    cmds:
      - terraform destroy --auto-approve

  graph:
    dir: tf
    cmds:
      - terraform graph | dot -Tsvg > graph.svg

  test:
    cmds:
      - echo "{{.aws_account_id}}"
      - echo "{{.image_version}}"

  image-variables:
    cmds:
      - echo "aws_account_id = \"{{.aws_account_id}}\"" > ./tf/.account.auto.tfvars
      - echo "image_version = \"{{.image_version}}\"" > ./tf/.image.auto.tfvars

  update-go-deps:
    cmds:
      - bazel run //:gazelle -- update
      - bazel run //tools/update-go-deps

  plan-all:
    deps: [image-variables]
    dir: tf
    cmds:
      - terraform plan

  tf-fmt-all:
    cmds:
      - terraform fmt -recursive .

  go-fmt-all:
    cmds:
      - gofmt -s -w packages

  lint-all:
    deps: [tf-fmt-all, go-fmt-all]
    cmds:
      - task: common-lint
      - task: router-lint
      - task: forms-lint
      - task: support-lint
      - task: global-lint
      - task: users-lint
      - task: cloud-lint
      - task: feature_flags-lint
      - task: patient-lint

  test-all:
    cmds:
      - task: common-test
      - task: router-test
      - task: forms-test
      - task: support-test
      - task: global-test
      - task: users-test
      - task: cloud-test
      - task: feature_flags-test
      - task: patient-test

  code-coverage:
    deps: [test-all]
    cmds:
      - go install github.com/wadey/gocovmerge
      - $GOPATH/gocovmerge
        packages/router/profile.cov
        packages/forms/profile.cov
        packages/support/profile.cov
        packages/global/profile.cov
        packages/users/profile.cov
        packages/cloud/profile.cov > all-profile.cov
      - go tool cover -func all-profile.cov

  code-coverage-format:
    deps: [code-coverage]
    cmds:
      - go get github.com/t-yuki/gocover-cobertura
      - gocover-cobertura < profile.cov > coverage.xml

  import:
    dir: tf
    cmds:
      - terraform import

  build:
    deps:
      [
        image-variables,
        init-tf,
        forms-build,
        global-build,
        router-build,
        support-build,
        cloud-build,
        users-build,
        feature_flags-build,
        patient-build,
      ]

  deploy-deps:
    deps:
      [
        image-variables,
        init-tf,
        forms-build-and-push,
        global-build-and-push,
        router-build-and-push,
        support-build-and-push,
        users-build-and-push,
        cloud-build-and-push,
        feature_flags-build-and-push,
        patient-build-and-push,
      ]
    dir: tf

  deploy:
    deps: [deploy-deps]
    dir: tf
    cmds:
      - terraform apply

  deploy-no-lock:
    deps: [deploy-deps]
    dir: tf
    cmds:
      - terraform apply -lock=false

  deploy-auto-approve:
    deps: [deploy-deps]
    dir: tf
    cmds:
      - terraform apply -auto-approve

  deploy-tf:
    deps: [init-tf]
    dir: tf
    cmds:
      - terraform apply

  docker-login:
    cmds:
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin {{.aws_account_id}}.dkr.ecr.us-east-2.amazonaws.com

  migrate-up:
    vars:
      db_info:
        sh: cd ./tf/ && terraform show --json |  jq '.values .root_module .resources[] | select(.address=="aws_rds_cluster.sonar_service_rds_cluster") .values'
      db_password:
        sh: echo '{{.db_info}}' | jq '.master_password'
      db_endpoint:
        sh: echo '{{.db_info}}' | jq '.endpoint'
    cmds:
      - migrate -source file://db/migrations -database postgresql://circulo:{{.db_password}}@{{.db_endpoint}}:5432/sonar?sslmode=disable up
      - if [ "{{.environment}}" != "prod" ] && [ "{{.environment}}" != "test" ] && [ "{{.environment}}" != "dev" ]; then
        migrate -source file://db/external_migrations -database postgresql://circulo:{{.db_password}}@{{.db_endpoint}}:5432/external?sslmode=disable up;
        fi
    silent: true

  migrate-down:
    vars:
      db_info:
        sh: cd ./tf/ && terraform show --json |  jq '.values .root_module .resources[] | select(.address=="aws_rds_cluster.sonar_service_rds_cluster") .values'
      db_password:
        sh: echo '{{.db_info}}' | jq '.master_password'
      db_endpoint:
        sh: echo '{{.db_info}}' | jq '.endpoint'
    cmds:
      - migrate -source file://db/migrations -database postgresql://circulo:{{.db_password}}@{{.db_endpoint}}:5432/sonar?sslmode=disable down
      - if [ "{{.environment}}" != "prod" ] && [ "{{.environment}}" != "test" ] && [ "{{.environment}}" != "dev" ]; then
        migrate -source file://db/external_migrations -database postgresql://circulo:{{.db_password}}@{{.db_endpoint}}:5432/external?sslmode=disable down;
        fi
    silent: true

  migrate-direction-with-number:
    vars:
      db_info:
        sh: cd ./tf/ && terraform show --json |  jq '.values .root_module .resources[] | select(.address=="aws_rds_cluster.sonar_service_rds_cluster") .values'
      db_password:
        sh: echo '{{.db_info}}' | jq '.master_password'
      db_endpoint:
        sh: echo '{{.db_info}}' | jq '.endpoint'
    cmds:
      - migrate -source file://db/migrations -database postgresql://circulo:{{.db_password}}@{{.db_endpoint}}:5432/sonar?sslmode=disable {{.DIRECTION}} {{.NUMBER_DOWN}}
    silent: true

  migrate-drop:
    vars:
      db_info:
        sh: cd ./tf/ && terraform show --json |  jq '.values .root_module .resources[] | select(.address=="aws_rds_cluster.sonar_service_rds_cluster") .values'
      db_password:
        sh: echo '{{.db_info}}' | jq '.master_password'
      db_endpoint:
        sh: echo '{{.db_info}}' | jq '.endpoint'
    cmds:
      - migrate -source file://db/migrations -database postgresql://circulo:{{.db_password}}@{{.db_endpoint}}:5432/sonar?sslmode=disable drop
    silent: true

  migrate-force:
    vars:
      db_info:
        sh: cd ./tf/ && terraform show --json |  jq '.values .root_module .resources[] | select(.address=="aws_rds_cluster.sonar_service_rds_cluster") .values'
      db_password:
        sh: echo '{{.db_info}}' | jq '.master_password'
      db_endpoint:
        sh: echo '{{.db_info}}' | jq '.endpoint'
    cmds:
      - migrate -source file://db/migrations -database postgresql://circulo:{{.db_password}}@{{.db_endpoint}}:5432/sonar?sslmode=disable force {{.DB_VERSION}}
    silent: true

  ########################
  # Auto Generate Mocks  #
  ########################

  auto-gen-mocks:
    deps:
      [
        auto-gen-third-party-mocks,
        authorizer-auto-gen-mocks,
        support-auto-gen-mocks,
        users-pkg-dao-auto-gen-mocks,
        users-pkg-idp-auto-gen-mocks,
        common-auto-gen-mocks,
        feature_flags-auto-gen-mocks,
        patient-auto-gen-mocks,
      ]

  # auto generate the mocks for 3rd party packages to common/mocks
  # pre-req: GOPATH should be set to /Users/<user-name>/go
  #   if we don't own the interface and implementation, you should add a command here
  #   if we do own the interface and implementation, you should:
  #     1. put the interface in the <package>/interfaces folder
  #     2. make sure there is a command run inside the package to auto-generate them, e.g. authorizer-auto-gen-mocks
  auto-gen-third-party-mocks:
    dir: packages/common
    cmds:
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/lestrrat-go/jwx@v1.2.6/jwk --name Set
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/service/apigatewaymanagementapi/apigatewaymanagementapiiface --name ApiGatewayManagementApiAPI
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/service/sqs/sqsiface --name SQSAPI
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/service/s3/s3iface --name S3API
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/service/cognitoidentityprovider/cognitoidentityprovideriface --name CognitoIdentityProviderAPI
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/service/dynamodb/dynamodbiface --name DynamoDBAPI
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/service/eventbridge/eventbridgeiface --name EventBridgeAPI
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/aws/awserr --name Error
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/service/ses/sesiface --name SESAPI
      - mockery --case=underscore --dir $GOPATH/pkg/mod/github.com/aws/aws-sdk-go@v1.40.20/service/sesv2/sesv2iface --name SESV2API

  authorizer-auto-gen-mocks:
    dir: packages/common/authorizer
    cmds:
      - mockery --all --case=underscore

  ###################
  # Initialization  #
  ###################

  init:
    deps: [image-variables]
    dir: tf
    cmds:
      - task: init-tf
      - task: init-ecr

  init-tf:
    dir: tf
    cmds:
      - terraform init

  init-tf-upgrade:
    dir: tf
    cmds:
      - terraform init --upgrade

  fix-ecr:
    dir: tf
    cmds:
      - bash ../scripts/fix_ecr_repos.sh

  fix-security-update:
    dir: tf
    cmds:
      - bash ../scripts/fix_security_updates.sh

  fix-security-update-v2:
    dir: tf
    cmds:
      - bash ../scripts/fix_security_updates_v2.sh

  migrate-state-409:
    dir: tf
    cmds:
      - bash ../scripts/migrate_state_409.sh

  fix-state-400:
    dir: tf
    cmds:
      - bash ../scripts/destroy_user_list_connected_400_router.sh

  fix-pearls:
    dir: tf
    cmds:
      - bash ../scripts/destroy_pearls.sh

  fix-user-group-assign:
    dir: tf
    cmds:
      - bash ../scripts/destroy_user_group_assign.sh

  init-ecr:
    dir: tf
    cmds:
      - terraform apply -auto-approve
        -target=module.ecr_forms_lambda
        -target=module.ecr_global_lambda
        -target=module.ecr_router_lambda
        -target=module.ecr_support_lambda
        -target=module.ecr_users_lambda
        -target=module.ecr_cloud_lambda
        -target=module.ecr_feature_flags_lambda
        -target=module.ecr_patient_lambda

  ###################
  #      Router     #
  ###################

  router-build-deps:
    desc: Build router Golang binaries
    cmds:
      - bazel build //packages/router/cmd/...:all

  router-build:
    desc: Build router Docker image
    deps: [update-go-deps]
    cmds:
      - task: router-build-deps
      - bazel build //packages/router:router_lambda_image

  router-push:
    desc: Push router Docker image to ECR
    cmds:
      - bazel run //packages/router:router_lambda_image_push

  router-build-and-push:
    desc: Build and push router Docker image to ECR
    cmds:
      - task: router-build
      - task: router-push

  router-plan:
    dir: tf
    desc: Terraform plan router infrastructure
    cmds:
      - terraform plan -target=module.router

  router-deploy:
    dir: tf
    deps: [image-variables, router-build-and-push]
    desc: Terraform apply router infrastructure
    cmds:
      - terraform apply -auto-approve -target=module.router

  router-update-lambda:
    dir: tf
    deps: [image-variables, router-build-and-push]
    desc: Update router lambda functions with new image
    cmds:
      - task: router-update-lambda-hook

  router-update-lambda-hook:
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.router

  router-lint:
    dir: packages/router
    cmds:
      - golangci-lint run

  router-test:
    dir: packages/router
    cmds:
      - go test -coverprofile=profile.cov ./... -tags test
      - go tool cover -func=profile.cov

  ###################
  #      Forms      #
  ###################

  forms-build-deps:
    desc: Build Forms Golang binaries
    cmds:
      - bazel build //packages/forms/cmd/...:all

  forms-build:
    desc: Build Forms Docker image
    deps: [update-go-deps]
    cmds:
      - task: forms-build-deps
      - bazel build //packages/forms:forms_lambda_image

  forms-push:
    desc: Push Forms Docker image to ECR
    cmds:
      - bazel run //packages/forms:forms_lambda_image_push

  forms-build-and-push:
    desc: Build and push Forms Docker image to ECR
    cmds:
      - task: forms-build
      - task: forms-push

  forms-deploy:
    dir: tf
    deps: [image-variables, forms-build-and-push, router-build-and-push]
    desc: Terraform apply router infrastructure
    cmds:
      - terraform apply -auto-approve -target=module.forms

  forms-lint:
    dir: packages/forms
    cmds:
      - golangci-lint run

  forms-test:
    dir: packages/forms
    cmds:
      - go test -coverprofile=profile.cov ./... -tags test
      - go tool cover -func=profile.cov

  ###################
  #     Common      #
  ###################
  common-lint:
    dir: packages/common
    cmds:
      - golangci-lint run

  common-auto-gen-mocks:
    dir: packages/common
    cmds:
      - mockery --all --case=underscore

  common-test:
    dir: packages/common
    cmds:
      - go test -v -coverprofile=profile.cov ./...

  ####################
  #      Support     #
  ####################

  support-build-deps:
    desc: Build support Golang binaries
    cmds:
      - bazel build //packages/support/cmd/...:all

  support-build:
    desc: Build support Docker image
    deps: [update-go-deps]
    cmds:
      - task: support-build-deps
      - bazel build //packages/support:support_lambda_image

  support-push:
    desc: Push support Docker image to ECR
    cmds:
      - bazel run //packages/support:support_lambda_image_push

  support-build-and-push:
    desc: Build and push support Docker image to ECR
    cmds:
      - task: support-build
      - task: support-push

  support-plan:
    dir: tf
    desc: Terraform plan support infrastructure
    cmds:
      - terraform plan -target=module.support

  support-deploy:
    dir: tf
    deps: [image-variables, router-build-and-push, support-build-and-push]
    desc: Terraform apply support infrastructure
    cmds:
      - terraform apply -auto-approve -target=module.support

  support-dynamo:
    dir: tf
    deps: [image-variables, support-build-and-push]
    desc: Terraform apply support infrastructure
    cmds:
      - terraform apply -target=module.support.aws_dynamodb_table.chat_messages

  support-update-lambda:
    dir: tf
    deps: [image-variables, router-build-and-push, support-build-and-push]
    desc: Update support lambda functions with new image
    cmds:
      - task: support-update-lambda-hook

  support-update-lambda-hook:
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.support

  support-lint:
    dir: packages/support
    cmds:
      - golangci-lint run

  support-auto-gen-mocks:
    dir: packages/support
    cmds:
      - mockery --all --case=underscore

  support-test:
    dir: packages/support
    cmds:
      - go test -coverprofile=profile.cov ./... -tags test
      - go tool cover -func=profile.cov

  ##################
  #     Global     #
  ##################

  global-build-deps:
    desc: Build global Golang binaries
    cmds:
      - bazel build //packages/global/cmd/...:all

  global-build:
    desc: Build global Docker image
    deps: [update-go-deps]
    cmds:
      - task: global-build-deps
      - bazel build //packages/global:global_lambda_image

  global-push:
    desc: Push global Docker image to ECR
    cmds:
      - bazel run //packages/global:global_lambda_image_push

  global-build-and-push:
    desc: Build and push global Docker image to ECR
    cmds:
      - task: global-build
      - task: global-push

  global-plan:
    dir: tf
    desc: Terraform plan global infrastructure
    cmds:
      - terraform plan -target=module.global

  global-deploy:
    dir: tf
    deps: [image-variables, global-build-and-push]
    desc: Terraform apply global infrastructure
    cmds:
      - terraform apply -auto-approve -target=module.global

  global-update-lambda:
    dir: tf
    deps: [image-variables, global-build-and-push]
    desc: Update global lambda functions with new image
    cmds:
      - task: global-update-lambda-hook

  global-update-lambda-hook:
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.global

  global-lint:
    dir: packages/global
    cmds:
      - golangci-lint run

  global-test:
    dir: packages/global
    cmds:
      - go test -coverprofile=profile.cov ./... -tags test
      - go tool cover -func=profile.cov

  ###################
  #      Users     #
  ###################

  users-build-deps:
    desc: Build users Golang binaries
    cmds:
      - bazel build //packages/users/cmd/...:all

  users-build:
    desc: Build users Docker image
    deps: [update-go-deps]
    cmds:
      - task: users-build-deps
      - bazel build //packages/users:users_lambda_image

  users-push:
    desc: Push users Docker image to ECR
    cmds:
      - bazel run //packages/users:users_lambda_image_push

  users-build-and-push:
    desc: Build and push users Docker image to ECR
    cmds:
      - task: users-build
      - task: users-push

  users-plan:
    dir: tf
    desc: Terraform plan users infrastructure
    cmds:
      - terraform plan -target=module.users

  users-deploy:
    dir: tf
    deps: [image-variables, router-build-and-push, users-build-and-push]
    desc: Terraform apply users infrastructure
    cmds:
      - terraform apply -auto-approve -target=module.users

  users-deploy-tf:
    deps: [init-tf]
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.users

  users-update-lambda:
    dir: tf
    deps: [image-variables, router-build-and-push, users-build-and-push]
    desc: Update users lambda functions with new image
    cmds:
      - task: users-update-lambda-hook

  users-update-lambda-hook:
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.users

  users-lint:
    dir: packages/users
    cmds:
      - golangci-lint run

  users-test:
    dir: packages/users
    cmds:
      - go test -coverprofile=profile.cov ./... -tags test
      - go tool cover -func=profile.cov

  users-pkg-dao-auto-gen-mocks:
    dir: packages/users/pkg/dao
    cmds:
      - mockery --all --case=underscore

  # TODO: Remove once all of users package is updated to use aws idp
  users-pkg-idp-auto-gen-mocks:
    dir: packages/users/pkg/idp
    cmds:
      - mockery --all --case=underscore

  ###################
  #      Cloud      #
  ###################

  cloud-build-deps:
    desc: Build cloud Golang binaries
    cmds:
      - bazel build //packages/cloud/cmd/...:all

  cloud-build:
    desc: Build cloud Docker image
    deps: [update-go-deps]
    cmds:
      - task: cloud-build-deps
      - bazel build //packages/cloud:cloud_lambda_image

  cloud-push:
    desc: Push cloud Docker image to ECR
    cmds:
      - bazel run //packages/cloud:cloud_lambda_image_push

  cloud-deploy:
    dir: tf
    deps: [image-variables, cloud-build-and-push]
    desc: Terraform apply router infrastructure
    cmds:
      - terraform apply -auto-approve -target=module.cloud

  cloud-build-and-push:
    desc: Build and push router Docker image to ECR
    cmds:
      - task: cloud-build
      - task: cloud-push

  cloud-lint:
    dir: packages/cloud
    cmds:
      - golangci-lint run

  cloud-test:
    dir: packages/cloud
    cmds:
      - go test -coverprofile=profile.cov ./... -tags test
      - go tool cover -func=profile.cov

  ###################
  # Feature Flags   #
  ###################
  feature_flags-build-deps:
    desc: Build feature_flags Golang binaries
    cmds:
      - bazel build //packages/feature_flags/cmd/...:all

  feature_flags-build:
    desc: Build feature_flags Docker image
    deps: [update-go-deps]
    cmds:
      - task: feature_flags-build-deps
      - bazel build //packages/feature_flags:feature_flags_lambda_image

  feature_flags-push:
    desc: Push feature_flags Docker image to ECR
    cmds:
      - bazel run //packages/feature_flags:feature_flags_lambda_image_push

  feature_flags-build-and-push:
    desc: Build and push feature_flags Docker image to ECR
    cmds:
      - task: feature_flags-build
      - task: feature_flags-push

  feature_flags-plan:
    dir: tf
    desc: Terraform plan feature_flags infrastructure
    cmds:
      - terraform plan -target=module.feature_flags

  feature_flags-deploy:
    dir: tf
    deps: [image-variables, feature_flags-build-and-push]
    desc: Terraform apply feature_flags infrastructure
    cmds:
      - terraform apply -auto-approve -target=module.feature_flags

  feature_flags-deploy-tf:
    deps: [init-tf]
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.feature_flags

  feature_flags-lambda:
    dir: tf
    deps: [image-variables, feature_flags-build-and-push]
    desc: Update feature_flags lambda functions with new image
    cmds:
      - task: feature_flags-update-lambda-hook

  feature_flags-update-lambda-hook:
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.feature_flags

  feature_flags-lint:
    dir: packages/feature_flags
    cmds:
      - golangci-lint run

  feature_flags-auto-gen-mocks:
    dir: packages/feature_flags
    cmds:
      - mockery --all --case=underscore

  feature_flags-test:
    dir: packages/feature_flags
    cmds:
      - go test -coverprofile=profile.cov ./... -tags test
      - go tool cover -func=profile.cov

  ###################
  # Patients   #
  ###################
  patient-build-deps:
    desc: Build patient Golang binaries
    cmds:
      - bazel build //packages/patient/cmd/...:all

  patient-build:
    desc: Build patient Docker image
    deps: [update-go-deps]
    cmds:
      - task: patient-build-deps
      - bazel build //packages/patient:patient_lambda_image

  patient-push:
    desc: Push patient Docker image to ECR
    cmds:
      - bazel run //packages/patient:patient_lambda_image_push

  patient-build-and-push:
    desc: Build and push patient Docker image to ECR
    cmds:
      - task: patient-build
      - task: patient-push

  patient-plan:
    dir: tf
    desc: Terraform plan patient infrastructure
    cmds:
      - terraform plan -target=module.patient

  patient-deploy:
    dir: tf
    deps: [image-variables, patient-build-and-push]
    desc: Terraform apply patient infrastructure
    cmds:
      - terraform apply -auto-approve -target=module.patient

  patient-deploy-tf:
    deps: [init-tf]
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.patient

  patient-lambda:
    dir: tf
    deps: [image-variables, patient-build-and-push]
    desc: Update patient lambda functions with new image
    cmds:
      - task: patient-update-lambda-hook

  patient-update-lambda-hook:
    dir: tf
    cmds:
      - terraform apply -auto-approve -target=module.patient

  patient-lint:
    dir: packages/patient
    cmds:
      - golangci-lint run

  patient-auto-gen-mocks:
    dir: packages/patient
    cmds:
      - mockery --all --case=underscore

  patient-test:
    dir: packages/patient
    cmds:
      - go test -coverprofile=profile.cov ./... -tags test
      - go tool cover -func=profile.cov
