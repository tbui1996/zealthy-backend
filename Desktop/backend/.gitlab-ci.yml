# Global Variables
variables:
  TF_ROOT: tf/
  TF_VAR_image_version: ${CI_COMMIT_SHA}
  BAZEL_VERSION: v4.1.0-slim

# Workflow Variables
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      variables:
        ENVIRONMENT_NAME: development
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/develop
        VPC_RUNNER: workflow-dev-vpc
    - if: '$CI_COMMIT_BRANCH == "develop"'
      variables:
        ENVIRONMENT_NAME: development
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/develop
        RUN_ALL: "true"
        VPC_RUNNER: workflow-dev-vpc
    - if: '$CI_COMMIT_BRANCH == "test"'
      variables:
        ENVIRONMENT_NAME: testing
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/test
        RUN_ALL: "true"
        VPC_RUNNER: workflow-test-vpc
    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        ENVIRONMENT_NAME: production
        TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/production
        RUN_ALL: "true"
        VPC_RUNNER: workflow-prod-vpc

# Base Stages
stages:
  - init
  - analyze
  - test
  - build
  - visualize
  - deploy
  - pages
  - migrate
  - destroy

# Terraform
init_tf:
  stage: init
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - "**/*.tf"
    - if: '$RUN_ALL == "true"'
      when: always
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - cd ${TF_ROOT}
    - |-
      if [[ $TF_PROVIDER_UPGRADE != "" ]]; then
        gitlab-terraform init --upgrade
      else
        gitlab-terraform init
      fi
    - gitlab-terraform validate
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        gitlab-terraform plan -target=module.ecr_forms_lambda -target=module.ecr_global_lambda -target=module.ecr_router_lambda -target=module.ecr_support_lambda -target=module.ecr_users_lambda -target=module.ecr_cloud_lambda -target=module.ecr_feature_flags_lambda -target=module.ecr_patient_lambda
        gitlab-terraform plan-json -target=module.ecr_forms_lambda -target=module.ecr_global_lambda -target=module.ecr_router_lambda -target=module.ecr_support_lambda -target=module.ecr_users_lambda -target=module.ecr_cloud_lambda -target=module.ecr_feature_flags_lambda -target=module.ecr_patient_lambda
        gitlab-terraform apply -target=module.ecr_forms_lambda -target=module.ecr_global_lambda -target=module.ecr_router_lambda -target=module.ecr_support_lambda -target=module.ecr_users_lambda -target=module.ecr_cloud_lambda -target=module.ecr_feature_flags_lambda -target=module.ecr_patient_lambda
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl

lint_terraform:
  stage: analyze
  needs:
    - init_tf
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - "**/*.tf"
    - if: '$RUN_ALL == "true"'
      when: always
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - gitlab-terraform fmt -recursive -check
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl

test_terraform:
  stage: test
  needs:
    - init_tf
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - "**/*.tf"
    - if: '$RUN_ALL == "true"'
      when: always
  image:
    name: tfsec/tfsec-ci
  script:
    - cd ${TF_ROOT}
    - tfsec --exclude aws-vpc-no-public-egress-sg,aws-vpc-no-public-ingress-sg .
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl

build_terraform:
  stage: build
  needs:
    - init_tf
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - "**/*.tf"
    - if: '$RUN_ALL == "true"'
      when: always
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  cache:
    key: "${TF_ROOT}"
    paths:
      - ${TF_ROOT}/.terraform/
      - ${TF_ROOT}/.terraform.lock.hcl
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

# Linting Stages
lint_go_fmt:
  image:
    name: golang:1.16
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - LINT_OUTPUT="$(gofmt -d packages)"
    - echo $LINT_OUTPUT
    - test -z $LINT_OUTPUT

lint_common:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/common/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/common
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/packages/common/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/common/lint-cache/

lint_cloud:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/cloud/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/cloud
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/packages/cloud/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/cloud/lint-cache/

lint_forms:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/forms/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/forms
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/packages/forms/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/forms/lint-cache/

lint_router:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/router/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/router
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/package/router/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/router/lint-cache/

lint_support:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/support/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/support
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/package/support/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/support/lint-cache/

lint_global:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/global/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/global
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/package/global/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/global/lint-cache/

lint_users:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/users/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/users
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/package/users/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/users/lint-cache/

lint_feature_flags:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/feature_flags/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/feature_flags
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/package/feature_flags/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/feature_flags/lint-cache/

lint_patient:
  image: golangci/golangci-lint:v1.43.0
  stage: analyze
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/patient/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  script:
    - cd packages/patient
    - GOLANGCI_LINT_CACHE=$CI_PROJECT_DIR/package/patient/lint-cache golangci-lint run --fast
  cache:
    key: $CI_JOB_NAME
    paths:
      - $CI_PROJECT_DIR/packages/patient/lint-cache/

build_cloud:
  image:
    name: registry.gitlab.com/circulohealth/infrastructure/docker-images/bazel:$BAZEL_VERSION
  stage: build
  needs:
    - lint_cloud
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/cloud/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  before_script:
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
  script:
    - bazel --output_base output build //packages/cloud/cmd/...:all
    - bazel --output_base output build //packages/cloud:cloud_lambda_image
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        bazel --output_base output run //packages/cloud:cloud_lambda_image_push
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: $CI_JOB_NAME-$BAZEL_VERSION
    paths:
      - output

build_forms:
  image:
    name: registry.gitlab.com/circulohealth/infrastructure/docker-images/bazel:$BAZEL_VERSION
  stage: build
  needs:
    - lint_forms
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/forms/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  before_script:
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
  script:
    - bazel --output_base output build //packages/forms/cmd/...:all
    - bazel --output_base output build //packages/forms:forms_lambda_image
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        bazel --output_base output run //packages/forms:forms_lambda_image_push
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: $CI_JOB_NAME-$BAZEL_VERSION
    paths:
      - output

build_router:
  image:
    name: registry.gitlab.com/circulohealth/infrastructure/docker-images/bazel:$BAZEL_VERSION
  stage: build
  needs:
    - lint_router
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/router/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  before_script:
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
  script:
    - bazel --output_base output build //packages/router/cmd/...:all
    - bazel --output_base output build //packages/router:router_lambda_image
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        bazel --output_base output run //packages/router:router_lambda_image_push
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: $CI_JOB_NAME-$BAZEL_VERSION
    paths:
      - output

build_support:
  image:
    name: registry.gitlab.com/circulohealth/infrastructure/docker-images/bazel:$BAZEL_VERSION
  stage: build
  needs:
    - lint_support
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/support/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  before_script:
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
  script:
    - bazel --output_base output build //packages/support/cmd/...:all
    - bazel --output_base output build //packages/support:support_lambda_image
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        bazel --output_base output run //packages/support:support_lambda_image_push
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: $CI_JOB_NAME-$BAZEL_VERSION
    paths:
      - output

build_global:
  image:
    name: registry.gitlab.com/circulohealth/infrastructure/docker-images/bazel:$BAZEL_VERSION
  stage: build
  needs:
    - lint_global
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/global/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  before_script:
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
  script:
    - bazel --output_base output build //packages/global/cmd/...:all
    - bazel --output_base output build //packages/global:global_lambda_image
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        bazel --output_base output run //packages/global:global_lambda_image_push
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: $CI_JOB_NAME-$BAZEL_VERSION
    paths:
      - output

build_users:
  image:
    name: registry.gitlab.com/circulohealth/infrastructure/docker-images/bazel:$BAZEL_VERSION
  stage: build
  needs:
    - lint_users
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/users/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  before_script:
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
  script:
    - bazel --output_base output build //packages/users/cmd/...:all
    - bazel --output_base output build //packages/users:users_lambda_image
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        bazel --output_base output run //packages/users:users_lambda_image_push
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: $CI_JOB_NAME-$BAZEL_VERSION
    paths:
      - output

build_feature_flags:
  image:
    name: registry.gitlab.com/circulohealth/infrastructure/docker-images/bazel:$BAZEL_VERSION
  stage: build
  needs:
    - lint_feature_flags
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/feature_flags/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  before_script:
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
  script:
    - bazel --output_base output build //packages/feature_flags/cmd/...:all
    - bazel --output_base output build //packages/feature_flags:feature_flags_lambda_image
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        bazel --output_base output run //packages/feature_flags:feature_flags_lambda_image_push
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: $CI_JOB_NAME-$BAZEL_VERSION
    paths:
      - output

build_patient:
  image:
    name: registry.gitlab.com/circulohealth/infrastructure/docker-images/bazel:$BAZEL_VERSION
  stage: build
  needs:
    - lint_patient
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - packages/patient/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  before_script:
    - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-2.amazonaws.com
  script:
    - bazel --output_base output build //packages/patient/cmd/...:all
    - bazel --output_base output build //packages/patient:patient_lambda_image
    - |-
      if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
        bazel --output_base output run //packages/patient:patient_lambda_image_push
      fi
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  cache:
    key: $CI_JOB_NAME-$BAZEL_VERSION
    paths:
      - output

# Testing
test_migrations:
  stage: test
  needs: []
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "web"'
      changes:
        - db/migrations/**/*
    - if: '$RUN_ALL == "true"'
      when: always
  services:
    - postgres:11.13-alpine
  variables:
    POSTGRES_DB: sonar
    POSTGRES_USER: circulo
    POSTGRES_PASSWORD: ${TF_VAR_db_password}
    POSTGRES_HOST_AUTH_METHOD: trust
  image:
    name: migrate/migrate
    entrypoint: [""]
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  script:
    # Test migration up
    - migrate -source file://db/migrations -database postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable up
    # Test migration down
    - migrate -source file://db/migrations -database postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable down -all

test_go:
  image:
    name: golang:1.16
  stage: test
  needs: []
  before_script:
    - mkdir -p /go/src/gitlab.com/circulohealth/sonar/backend/packages /go/src/_/builds/
    - cp -r $CI_PROJECT_DIR/packages /go/src/gitlab.com/circulohealth/sonar/backend/packages
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/common /go/src/_/builds/common
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/cloud /go/src/_/builds/cloud
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/forms /go/src/_/builds/forms
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/router /go/src/_/builds/router
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/global /go/src/_/builds/global
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/users /go/src/_/builds/users
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/support /go/src/_/builds/support
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/feature_flags /go/src/_/builds/feature_flags
    - ln -s /go/src/gitlab.com/circulohealth/sonar/backend/packages/patient /go/src/_/builds/patient
    - go get -v -d ./...
  script:
    - cd packages/common
    - go test -coverprofile=common.cov ./... -tags test
    - cd ../cloud
    - go test -coverprofile=cloud.cov ./... -tags test
    - cd ../forms
    - go test -coverprofile=forms.cov ./... -tags test
    - cd ../router
    - go test -coverprofile=router.cov ./... -tags test
    - cd ../global
    - go test -coverprofile=global.cov ./... -tags test
    - cd ../users
    - go test -coverprofile=users.cov ./... -tags test
    - cd ../support
    - go test -coverprofile=support.cov ./... -tags test
    - cd ../feature_flags
    - go test -coverprofile=feature_flags.cov ./... -tags test
    - cd ../patient
    - go test -coverprofile=patient.cov ./... -tags test
  artifacts:
    paths:
      - packages/common/common.cov
      - packages/cloud/cloud.cov
      - packages/forms/forms.cov
      - packages/router/router.cov
      - packages/global/global.cov
      - packages/users/users.cov
      - packages/support/support.cov
      - packages/feature_flags/feature_flags.cov
      - packages/patient/patient.cov

coverage:
  image:
    name: golang:1.16
  stage: visualize
  needs:
    - test_go
  dependencies:
    - test_go
  before_script:
    - go get github.com/wadey/gocovmerge
    - go get github.com/t-yuki/gocover-cobertura
  script:
    - gocovmerge
      packages/common/common.cov
      packages/cloud/cloud.cov
      packages/forms/forms.cov
      packages/router/router.cov
      packages/global/global.cov
      packages/users/users.cov
      packages/feature_flags/feature_flags.cov
      packages/support/support.cov 
      packages/patient/patient.cov  > all-profile.cov
    - gocover-cobertura < all-profile.cov > coverage.xml
    - go tool cover -func all-profile.cov | tail -1
  coverage: /total:\s+\(statements\)\s+(\d+.\d+\%)/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    paths:
      - coverage.xml
      - all-profile.cov
    reports:
      cobertura: coverage.xml

# Deployment
deploy:
  stage: deploy
  dependencies:
    - build_terraform
  image:
    name: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform apply
  when: on_success
  environment:
    name: $ENVIRONMENT_NAME
  only:
    variables:
      - $CI_COMMIT_BRANCH == "develop"
      - $CI_COMMIT_BRANCH == "test"
      - $CI_COMMIT_BRANCH == "main"

pages:
  stage: pages
  image: 
    name: golang:1.16
  before_script:
    - go get golang.org/x/tools/cmd/godoc
    - go get code.rocketnine.space/tslocum/godoc-static
  script:
    - godoc-static -site-name="Sonar Backend Documentation" -destination=public/ packages/*
  artifacts:
    paths:
      - public

migrate:
  stage: migrate
  image:
    name: registry.gitlab.com/circulohealth/sonar/infrastructure/docker-ci-migrate:4
    entrypoint: [""]
  environment:
    name: $ENVIRONMENT_NAME
    action: prepare
  needs:
    - deploy
  variables:
    DB_USER: circulo
    DB_NAME: sonar
    DB_PASSWORD: ${TF_VAR_db_password}
  script:
    - |-
      if [[ $CI_PIPELINE_SOURCE == "web" && $DB_VERSION != "" ]]; then
        migrate -source file://db/migrations -database postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/sonar?sslmode=disable force ${DB_VERSION}
      fi
    - migrate -source file://db/migrations -database postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:5432/sonar?sslmode=disable up
  tags:
    - $VPC_RUNNER
  only:
    variables:
      - $CI_COMMIT_BRANCH == "develop"
      - $CI_COMMIT_BRANCH == "test"
      - $CI_COMMIT_BRANCH == "main"
