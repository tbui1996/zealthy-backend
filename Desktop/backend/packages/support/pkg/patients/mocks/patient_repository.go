// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/circulohealth/sonar-backend/packages/support/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// PatientRepository is an autogenerated mock type for the PatientRepository type
type PatientRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: filter
func (_m *PatientRepository) Find(filter interface{}) (*model.Patient, error) {
	ret := _m.Called(filter)

	var r0 *model.Patient
	if rf, ok := ret.Get(0).(func(interface{}) *model.Patient); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Patient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: filter
func (_m *PatientRepository) FindAll(filter interface{}) ([]model.Patient, error) {
	ret := _m.Called(filter)

	var r0 []model.Patient
	if rf, ok := ret.Get(0).(func(interface{}) []model.Patient); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Patient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
