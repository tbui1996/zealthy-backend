// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/circulohealth/sonar-backend/packages/support/pkg/model"
	request "github.com/circulohealth/sonar-backend/packages/support/pkg/request"
	mock "github.com/stretchr/testify/mock"

	response "github.com/circulohealth/sonar-backend/packages/support/pkg/response"
)

// ChatSession is an autogenerated mock type for the ChatSession type
type ChatSession struct {
	mock.Mock
}

// AppendRequestMessage provides a mock function with given fields: message
func (_m *ChatSession) AppendRequestMessage(message request.Chat) (*model.ChatMessage, error) {
	ret := _m.Called(message)

	var r0 *model.ChatMessage
	if rf, ok := ret.Get(0).(func(request.Chat) *model.ChatMessage); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.Chat) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields:
func (_m *ChatSession) GetMessages() ([]model.ChatMessage, error) {
	ret := _m.Called()

	var r0 []model.ChatMessage
	if rf, ok := ret.Get(0).(func() []model.ChatMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *ChatSession) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InternalUserID provides a mock function with given fields:
func (_m *ChatSession) InternalUserID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// InternalUserLastRead provides a mock function with given fields:
func (_m *ChatSession) InternalUserLastRead() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// IsPending provides a mock function with given fields:
func (_m *ChatSession) IsPending() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// LastMessageTimestamp provides a mock function with given fields:
func (_m *ChatSession) LastMessageTimestamp() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Patient provides a mock function with given fields:
func (_m *ChatSession) Patient() response.PatientResponse {
	ret := _m.Called()

	var r0 response.PatientResponse
	if rf, ok := ret.Get(0).(func() response.PatientResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(response.PatientResponse)
	}

	return r0
}

// ToResponseDTO provides a mock function with given fields:
func (_m *ChatSession) ToResponseDTO() response.ChatSessionResponseDTO {
	ret := _m.Called()

	var r0 response.ChatSessionResponseDTO
	if rf, ok := ret.Get(0).(func() response.ChatSessionResponseDTO); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(response.ChatSessionResponseDTO)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *ChatSession) Type() model.ChatType {
	ret := _m.Called()

	var r0 model.ChatType
	if rf, ok := ret.Get(0).(func() model.ChatType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.ChatType)
	}

	return r0
}

// UserID provides a mock function with given fields:
func (_m *ChatSession) UserID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UserLastRead provides a mock function with given fields:
func (_m *ChatSession) UserLastRead() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}
