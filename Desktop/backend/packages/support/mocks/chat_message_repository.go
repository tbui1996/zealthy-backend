// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	model "github.com/circulohealth/sonar-backend/packages/support/pkg/model"
	request "github.com/circulohealth/sonar-backend/packages/support/pkg/request"
	mock "github.com/stretchr/testify/mock"
)

// ChatMessageRepository is an autogenerated mock type for the ChatMessageRepository type
type ChatMessageRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: message
func (_m *ChatMessageRepository) Create(message request.Chat) (*model.ChatMessage, error) {
	ret := _m.Called(message)

	var r0 *model.ChatMessage
	if rf, ok := ret.Get(0).(func(request.Chat) *model.ChatMessage); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.Chat) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesForSession provides a mock function with given fields: id
func (_m *ChatMessageRepository) GetMessagesForSession(id string) ([]model.ChatMessage, error) {
	ret := _m.Called(id)

	var r0 []model.ChatMessage
	if rf, ok := ret.Get(0).(func(string) []model.ChatMessage); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ChatMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
