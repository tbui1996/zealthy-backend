// Code generated by mockery 2.9.4. DO NOT EDIT.

package iface

import (
	cognitoidentityprovider "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	exception "github.com/circulohealth/sonar-backend/packages/common/exception"

	mock "github.com/stretchr/testify/mock"
)

// MockSonarIdentityProvider is an autogenerated mock type for the SonarIdentityProvider type
type MockSonarIdentityProvider struct {
	mock.Mock
}

// AdminAddUserToGroup provides a mock function with given fields: username, groupName
func (_m *MockSonarIdentityProvider) AdminAddUserToGroup(username string, groupName string) (*cognitoidentityprovider.AdminAddUserToGroupOutput, error) {
	ret := _m.Called(username, groupName)

	var r0 *cognitoidentityprovider.AdminAddUserToGroupOutput
	if rf, ok := ret.Get(0).(func(string, string) *cognitoidentityprovider.AdminAddUserToGroupOutput); ok {
		r0 = rf(username, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminAddUserToGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminDisableUser provides a mock function with given fields: username
func (_m *MockSonarIdentityProvider) AdminDisableUser(username string) (*cognitoidentityprovider.AdminDisableUserOutput, error) {
	ret := _m.Called(username)

	var r0 *cognitoidentityprovider.AdminDisableUserOutput
	if rf, ok := ret.Get(0).(func(string) *cognitoidentityprovider.AdminDisableUserOutput); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminDisableUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminEnableUser provides a mock function with given fields: username
func (_m *MockSonarIdentityProvider) AdminEnableUser(username string) (*cognitoidentityprovider.AdminEnableUserOutput, error) {
	ret := _m.Called(username)

	var r0 *cognitoidentityprovider.AdminEnableUserOutput
	if rf, ok := ret.Get(0).(func(string) *cognitoidentityprovider.AdminEnableUserOutput); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminEnableUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminGetUser provides a mock function with given fields: username
func (_m *MockSonarIdentityProvider) AdminGetUser(username string) (*cognitoidentityprovider.AdminGetUserOutput, error) {
	ret := _m.Called(username)

	var r0 *cognitoidentityprovider.AdminGetUserOutput
	if rf, ok := ret.Get(0).(func(string) *cognitoidentityprovider.AdminGetUserOutput); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminGetUserOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminListGroupsForUser provides a mock function with given fields: username
func (_m *MockSonarIdentityProvider) AdminListGroupsForUser(username string) (*cognitoidentityprovider.AdminListGroupsForUserOutput, *exception.SonarError) {
	ret := _m.Called(username)

	var r0 *cognitoidentityprovider.AdminListGroupsForUserOutput
	if rf, ok := ret.Get(0).(func(string) *cognitoidentityprovider.AdminListGroupsForUserOutput); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminListGroupsForUserOutput)
		}
	}

	var r1 *exception.SonarError
	if rf, ok := ret.Get(1).(func(string) *exception.SonarError); ok {
		r1 = rf(username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exception.SonarError)
		}
	}

	return r0, r1
}

// AdminRemoveUserFromGroup provides a mock function with given fields: username, groupName
func (_m *MockSonarIdentityProvider) AdminRemoveUserFromGroup(username string, groupName string) (*cognitoidentityprovider.AdminRemoveUserFromGroupOutput, error) {
	ret := _m.Called(username, groupName)

	var r0 *cognitoidentityprovider.AdminRemoveUserFromGroupOutput
	if rf, ok := ret.Get(0).(func(string, string) *cognitoidentityprovider.AdminRemoveUserFromGroupOutput); ok {
		r0 = rf(username, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminRemoveUserFromGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdminUserGlobalSignOut provides a mock function with given fields: username
func (_m *MockSonarIdentityProvider) AdminUserGlobalSignOut(username string) (*cognitoidentityprovider.AdminUserGlobalSignOutOutput, error) {
	ret := _m.Called(username)

	var r0 *cognitoidentityprovider.AdminUserGlobalSignOutOutput
	if rf, ok := ret.Get(0).(func(string) *cognitoidentityprovider.AdminUserGlobalSignOutOutput); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.AdminUserGlobalSignOutOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: group
func (_m *MockSonarIdentityProvider) GetGroup(group string) (*cognitoidentityprovider.GetGroupOutput, error) {
	ret := _m.Called(group)

	var r0 *cognitoidentityprovider.GetGroupOutput
	if rf, ok := ret.Get(0).(func(string) *cognitoidentityprovider.GetGroupOutput); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.GetGroupOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListUserInput provides a mock function with given fields: params
func (_m *MockSonarIdentityProvider) GetListUserInput(params map[string]string) *cognitoidentityprovider.ListUsersInput {
	ret := _m.Called(params)

	var r0 *cognitoidentityprovider.ListUsersInput
	if rf, ok := ret.Get(0).(func(map[string]string) *cognitoidentityprovider.ListUsersInput); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersInput)
		}
	}

	return r0
}

// ListGroups provides a mock function with given fields: limit, paginationToken
func (_m *MockSonarIdentityProvider) ListGroups(limit *int64, paginationToken *string) (*cognitoidentityprovider.ListGroupsOutput, error) {
	ret := _m.Called(limit, paginationToken)

	var r0 *cognitoidentityprovider.ListGroupsOutput
	if rf, ok := ret.Get(0).(func(*int64, *string) *cognitoidentityprovider.ListGroupsOutput); ok {
		r0 = rf(limit, paginationToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListGroupsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int64, *string) error); ok {
		r1 = rf(limit, paginationToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: listUserInput
func (_m *MockSonarIdentityProvider) ListUsers(listUserInput *cognitoidentityprovider.ListUsersInput) (*cognitoidentityprovider.ListUsersOutput, error) {
	ret := _m.Called(listUserInput)

	var r0 *cognitoidentityprovider.ListUsersOutput
	if rf, ok := ret.Get(0).(func(*cognitoidentityprovider.ListUsersInput) *cognitoidentityprovider.ListUsersOutput); ok {
		r0 = rf(listUserInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cognitoidentityprovider.ListUsersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*cognitoidentityprovider.ListUsersInput) error); ok {
		r1 = rf(listUserInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
