// Code generated by mockery 2.9.4. DO NOT EDIT.

package mapper

import mock "github.com/stretchr/testify/mock"

// mockExternalUserSQLAPI is an autogenerated mock type for the externalUserSQLAPI type
type mockExternalUserSQLAPI struct {
	mock.Mock
}

// find provides a mock function with given fields: id
func (_m *mockExternalUserSQLAPI) find(id string) (*externalUserSQLRecord, error) {
	ret := _m.Called(id)

	var r0 *externalUserSQLRecord
	if rf, ok := ret.Get(0).(func(string) *externalUserSQLRecord); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalUserSQLRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// findAll provides a mock function with given fields:
func (_m *mockExternalUserSQLAPI) findAll() ([]*externalUserSQLRecord, error) {
	ret := _m.Called()

	var r0 []*externalUserSQLRecord
	if rf, ok := ret.Get(0).(func() []*externalUserSQLRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*externalUserSQLRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// update provides a mock function with given fields: updater
func (_m *mockExternalUserSQLAPI) update(updater externalUserSQLRecordUpdater) error {
	ret := _m.Called(updater)

	var r0 error
	if rf, ok := ret.Get(0).(func(externalUserSQLRecordUpdater) error); ok {
		r0 = rf(updater)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
