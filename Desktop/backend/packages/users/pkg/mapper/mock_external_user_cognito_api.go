// Code generated by mockery 2.9.4. DO NOT EDIT.

package mapper

import mock "github.com/stretchr/testify/mock"

// mockExternalUserCognitoAPI is an autogenerated mock type for the externalUserCognitoAPI type
type mockExternalUserCognitoAPI struct {
	mock.Mock
}

// find provides a mock function with given fields: id
func (_m *mockExternalUserCognitoAPI) find(id string) (*externalUserCognitoRecord, error) {
	ret := _m.Called(id)

	var r0 *externalUserCognitoRecord
	if rf, ok := ret.Get(0).(func(string) *externalUserCognitoRecord); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*externalUserCognitoRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// findAll provides a mock function with given fields:
func (_m *mockExternalUserCognitoAPI) findAll() ([]*externalUserCognitoRecord, error) {
	ret := _m.Called()

	var r0 []*externalUserCognitoRecord
	if rf, ok := ret.Get(0).(func() []*externalUserCognitoRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*externalUserCognitoRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// update provides a mock function with given fields: record
func (_m *mockExternalUserCognitoAPI) update(record externalUserCognitoRecordUpdater) error {
	ret := _m.Called(record)

	var r0 error
	if rf, ok := ret.Get(0).(func(externalUserCognitoRecordUpdater) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
