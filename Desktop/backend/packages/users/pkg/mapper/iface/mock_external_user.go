// Code generated by mockery 2.9.4. DO NOT EDIT.

package iface

import (
	model "github.com/circulohealth/sonar-backend/packages/users/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// MockExternalUser is an autogenerated mock type for the ExternalUser type
type MockExternalUser struct {
	mock.Mock
}

// Find provides a mock function with given fields: id
func (_m *MockExternalUser) Find(id string) (*model.ExternalUser, error) {
	ret := _m.Called(id)

	var r0 *model.ExternalUser
	if rf, ok := ret.Get(0).(func(string) *model.ExternalUser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExternalUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *MockExternalUser) FindAll() ([]*model.ExternalUser, error) {
	ret := _m.Called()

	var r0 []*model.ExternalUser
	if rf, ok := ret.Get(0).(func() []*model.ExternalUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ExternalUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: dm
func (_m *MockExternalUser) Update(dm *model.ExternalUser) (*model.ExternalUser, error) {
	ret := _m.Called(dm)

	var r0 *model.ExternalUser
	if rf, ok := ret.Get(0).(func(*model.ExternalUser) *model.ExternalUser); ok {
		r0 = rf(dm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExternalUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.ExternalUser) error); ok {
		r1 = rf(dm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
