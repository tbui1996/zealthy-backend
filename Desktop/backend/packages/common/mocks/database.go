// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// Create provides a mock function with given fields: item
func (_m *Database) Create(item interface{}) error {
	ret := _m.Called(item)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: item
func (_m *Database) Delete(item *dynamodb.DeleteItemInput) (*dynamodb.DeleteItemOutput, error) {
	ret := _m.Called(item)

	var r0 *dynamodb.DeleteItemOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.DeleteItemInput) *dynamodb.DeleteItemOutput); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.DeleteItemOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dynamodb.DeleteItemInput) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: item
func (_m *Database) Get(item *dynamodb.GetItemInput) (*dynamodb.GetItemOutput, error) {
	ret := _m.Called(item)

	var r0 *dynamodb.GetItemOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.GetItemInput) *dynamodb.GetItemOutput); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.GetItemOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dynamodb.GetItemInput) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: input
func (_m *Database) Query(input *dynamodb.QueryInput) (*dynamodb.QueryOutput, error) {
	ret := _m.Called(input)

	var r0 *dynamodb.QueryOutput
	if rf, ok := ret.Get(0).(func(*dynamodb.QueryInput) *dynamodb.QueryOutput); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.QueryOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dynamodb.QueryInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scan provides a mock function with given fields: tableName
func (_m *Database) Scan(tableName string) (*dynamodb.ScanOutput, error) {
	ret := _m.Called(tableName)

	var r0 *dynamodb.ScanOutput
	if rf, ok := ret.Get(0).(func(string) *dynamodb.ScanOutput); ok {
		r0 = rf(tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ScanOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: expression, item, key
func (_m *Database) Update(expression string, item interface{}, key interface{}) error {
	ret := _m.Called(expression, item, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) error); ok {
		r0 = rf(expression, item, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
