// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	request "github.com/aws/aws-sdk-go/aws/request"
	mock "github.com/stretchr/testify/mock"

	sesv2 "github.com/aws/aws-sdk-go/service/sesv2"
)

// SESV2API is an autogenerated mock type for the SESV2API type
type SESV2API struct {
	mock.Mock
}

// CreateConfigurationSet provides a mock function with given fields: _a0
func (_m *SESV2API) CreateConfigurationSet(_a0 *sesv2.CreateConfigurationSetInput) (*sesv2.CreateConfigurationSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateConfigurationSetOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateConfigurationSetInput) *sesv2.CreateConfigurationSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateConfigurationSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateConfigurationSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSetEventDestination provides a mock function with given fields: _a0
func (_m *SESV2API) CreateConfigurationSetEventDestination(_a0 *sesv2.CreateConfigurationSetEventDestinationInput) (*sesv2.CreateConfigurationSetEventDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateConfigurationSetEventDestinationInput) *sesv2.CreateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateConfigurationSetEventDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateConfigurationSetEventDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSetEventDestinationRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateConfigurationSetEventDestinationRequest(_a0 *sesv2.CreateConfigurationSetEventDestinationInput) (*request.Request, *sesv2.CreateConfigurationSetEventDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateConfigurationSetEventDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateConfigurationSetEventDestinationInput) *sesv2.CreateConfigurationSetEventDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateConfigurationSetEventDestinationOutput)
		}
	}

	return r0, r1
}

// CreateConfigurationSetEventDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateConfigurationSetEventDestinationWithContext(_a0 context.Context, _a1 *sesv2.CreateConfigurationSetEventDestinationInput, _a2 ...request.Option) (*sesv2.CreateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateConfigurationSetEventDestinationInput, ...request.Option) *sesv2.CreateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateConfigurationSetEventDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateConfigurationSetEventDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSetRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateConfigurationSetRequest(_a0 *sesv2.CreateConfigurationSetInput) (*request.Request, *sesv2.CreateConfigurationSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateConfigurationSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateConfigurationSetOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateConfigurationSetInput) *sesv2.CreateConfigurationSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateConfigurationSetOutput)
		}
	}

	return r0, r1
}

// CreateConfigurationSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateConfigurationSetWithContext(_a0 context.Context, _a1 *sesv2.CreateConfigurationSetInput, _a2 ...request.Option) (*sesv2.CreateConfigurationSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateConfigurationSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateConfigurationSetInput, ...request.Option) *sesv2.CreateConfigurationSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateConfigurationSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateConfigurationSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContact provides a mock function with given fields: _a0
func (_m *SESV2API) CreateContact(_a0 *sesv2.CreateContactInput) (*sesv2.CreateContactOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateContactOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateContactInput) *sesv2.CreateContactOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateContactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateContactInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContactList provides a mock function with given fields: _a0
func (_m *SESV2API) CreateContactList(_a0 *sesv2.CreateContactListInput) (*sesv2.CreateContactListOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateContactListOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateContactListInput) *sesv2.CreateContactListOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateContactListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateContactListInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContactListRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateContactListRequest(_a0 *sesv2.CreateContactListInput) (*request.Request, *sesv2.CreateContactListOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateContactListInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateContactListOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateContactListInput) *sesv2.CreateContactListOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateContactListOutput)
		}
	}

	return r0, r1
}

// CreateContactListWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateContactListWithContext(_a0 context.Context, _a1 *sesv2.CreateContactListInput, _a2 ...request.Option) (*sesv2.CreateContactListOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateContactListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateContactListInput, ...request.Option) *sesv2.CreateContactListOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateContactListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateContactListInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContactRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateContactRequest(_a0 *sesv2.CreateContactInput) (*request.Request, *sesv2.CreateContactOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateContactInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateContactOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateContactInput) *sesv2.CreateContactOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateContactOutput)
		}
	}

	return r0, r1
}

// CreateContactWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateContactWithContext(_a0 context.Context, _a1 *sesv2.CreateContactInput, _a2 ...request.Option) (*sesv2.CreateContactOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateContactOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateContactInput, ...request.Option) *sesv2.CreateContactOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateContactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateContactInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomVerificationEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) CreateCustomVerificationEmailTemplate(_a0 *sesv2.CreateCustomVerificationEmailTemplateInput) (*sesv2.CreateCustomVerificationEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateCustomVerificationEmailTemplateInput) *sesv2.CreateCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateCustomVerificationEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateCustomVerificationEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomVerificationEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateCustomVerificationEmailTemplateRequest(_a0 *sesv2.CreateCustomVerificationEmailTemplateInput) (*request.Request, *sesv2.CreateCustomVerificationEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateCustomVerificationEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateCustomVerificationEmailTemplateInput) *sesv2.CreateCustomVerificationEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateCustomVerificationEmailTemplateOutput)
		}
	}

	return r0, r1
}

// CreateCustomVerificationEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateCustomVerificationEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.CreateCustomVerificationEmailTemplateInput, _a2 ...request.Option) (*sesv2.CreateCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateCustomVerificationEmailTemplateInput, ...request.Option) *sesv2.CreateCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateCustomVerificationEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateCustomVerificationEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDedicatedIpPool provides a mock function with given fields: _a0
func (_m *SESV2API) CreateDedicatedIpPool(_a0 *sesv2.CreateDedicatedIpPoolInput) (*sesv2.CreateDedicatedIpPoolOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateDedicatedIpPoolOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateDedicatedIpPoolInput) *sesv2.CreateDedicatedIpPoolOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateDedicatedIpPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateDedicatedIpPoolInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDedicatedIpPoolRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateDedicatedIpPoolRequest(_a0 *sesv2.CreateDedicatedIpPoolInput) (*request.Request, *sesv2.CreateDedicatedIpPoolOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateDedicatedIpPoolInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateDedicatedIpPoolOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateDedicatedIpPoolInput) *sesv2.CreateDedicatedIpPoolOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateDedicatedIpPoolOutput)
		}
	}

	return r0, r1
}

// CreateDedicatedIpPoolWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateDedicatedIpPoolWithContext(_a0 context.Context, _a1 *sesv2.CreateDedicatedIpPoolInput, _a2 ...request.Option) (*sesv2.CreateDedicatedIpPoolOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateDedicatedIpPoolOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateDedicatedIpPoolInput, ...request.Option) *sesv2.CreateDedicatedIpPoolOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateDedicatedIpPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateDedicatedIpPoolInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeliverabilityTestReport provides a mock function with given fields: _a0
func (_m *SESV2API) CreateDeliverabilityTestReport(_a0 *sesv2.CreateDeliverabilityTestReportInput) (*sesv2.CreateDeliverabilityTestReportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateDeliverabilityTestReportOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateDeliverabilityTestReportInput) *sesv2.CreateDeliverabilityTestReportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateDeliverabilityTestReportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateDeliverabilityTestReportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeliverabilityTestReportRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateDeliverabilityTestReportRequest(_a0 *sesv2.CreateDeliverabilityTestReportInput) (*request.Request, *sesv2.CreateDeliverabilityTestReportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateDeliverabilityTestReportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateDeliverabilityTestReportOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateDeliverabilityTestReportInput) *sesv2.CreateDeliverabilityTestReportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateDeliverabilityTestReportOutput)
		}
	}

	return r0, r1
}

// CreateDeliverabilityTestReportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateDeliverabilityTestReportWithContext(_a0 context.Context, _a1 *sesv2.CreateDeliverabilityTestReportInput, _a2 ...request.Option) (*sesv2.CreateDeliverabilityTestReportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateDeliverabilityTestReportOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateDeliverabilityTestReportInput, ...request.Option) *sesv2.CreateDeliverabilityTestReportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateDeliverabilityTestReportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateDeliverabilityTestReportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailIdentity provides a mock function with given fields: _a0
func (_m *SESV2API) CreateEmailIdentity(_a0 *sesv2.CreateEmailIdentityInput) (*sesv2.CreateEmailIdentityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateEmailIdentityOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateEmailIdentityInput) *sesv2.CreateEmailIdentityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailIdentityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateEmailIdentityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailIdentityPolicy provides a mock function with given fields: _a0
func (_m *SESV2API) CreateEmailIdentityPolicy(_a0 *sesv2.CreateEmailIdentityPolicyInput) (*sesv2.CreateEmailIdentityPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateEmailIdentityPolicyOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateEmailIdentityPolicyInput) *sesv2.CreateEmailIdentityPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailIdentityPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateEmailIdentityPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailIdentityPolicyRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateEmailIdentityPolicyRequest(_a0 *sesv2.CreateEmailIdentityPolicyInput) (*request.Request, *sesv2.CreateEmailIdentityPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateEmailIdentityPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateEmailIdentityPolicyOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateEmailIdentityPolicyInput) *sesv2.CreateEmailIdentityPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateEmailIdentityPolicyOutput)
		}
	}

	return r0, r1
}

// CreateEmailIdentityPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateEmailIdentityPolicyWithContext(_a0 context.Context, _a1 *sesv2.CreateEmailIdentityPolicyInput, _a2 ...request.Option) (*sesv2.CreateEmailIdentityPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateEmailIdentityPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailIdentityPolicyInput, ...request.Option) *sesv2.CreateEmailIdentityPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailIdentityPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateEmailIdentityPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailIdentityRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateEmailIdentityRequest(_a0 *sesv2.CreateEmailIdentityInput) (*request.Request, *sesv2.CreateEmailIdentityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateEmailIdentityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateEmailIdentityOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateEmailIdentityInput) *sesv2.CreateEmailIdentityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateEmailIdentityOutput)
		}
	}

	return r0, r1
}

// CreateEmailIdentityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateEmailIdentityWithContext(_a0 context.Context, _a1 *sesv2.CreateEmailIdentityInput, _a2 ...request.Option) (*sesv2.CreateEmailIdentityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateEmailIdentityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailIdentityInput, ...request.Option) *sesv2.CreateEmailIdentityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailIdentityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateEmailIdentityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) CreateEmailTemplate(_a0 *sesv2.CreateEmailTemplateInput) (*sesv2.CreateEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateEmailTemplateInput) *sesv2.CreateEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateEmailTemplateRequest(_a0 *sesv2.CreateEmailTemplateInput) (*request.Request, *sesv2.CreateEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateEmailTemplateInput) *sesv2.CreateEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateEmailTemplateOutput)
		}
	}

	return r0, r1
}

// CreateEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.CreateEmailTemplateInput, _a2 ...request.Option) (*sesv2.CreateEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailTemplateInput, ...request.Option) *sesv2.CreateEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImportJob provides a mock function with given fields: _a0
func (_m *SESV2API) CreateImportJob(_a0 *sesv2.CreateImportJobInput) (*sesv2.CreateImportJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.CreateImportJobOutput
	if rf, ok := ret.Get(0).(func(*sesv2.CreateImportJobInput) *sesv2.CreateImportJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.CreateImportJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImportJobRequest provides a mock function with given fields: _a0
func (_m *SESV2API) CreateImportJobRequest(_a0 *sesv2.CreateImportJobInput) (*request.Request, *sesv2.CreateImportJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.CreateImportJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.CreateImportJobOutput
	if rf, ok := ret.Get(1).(func(*sesv2.CreateImportJobInput) *sesv2.CreateImportJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.CreateImportJobOutput)
		}
	}

	return r0, r1
}

// CreateImportJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) CreateImportJobWithContext(_a0 context.Context, _a1 *sesv2.CreateImportJobInput, _a2 ...request.Option) (*sesv2.CreateImportJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.CreateImportJobOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateImportJobInput, ...request.Option) *sesv2.CreateImportJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateImportJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSet provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteConfigurationSet(_a0 *sesv2.DeleteConfigurationSetInput) (*sesv2.DeleteConfigurationSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteConfigurationSetOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteConfigurationSetInput) *sesv2.DeleteConfigurationSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteConfigurationSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteConfigurationSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSetEventDestination provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteConfigurationSetEventDestination(_a0 *sesv2.DeleteConfigurationSetEventDestinationInput) (*sesv2.DeleteConfigurationSetEventDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteConfigurationSetEventDestinationInput) *sesv2.DeleteConfigurationSetEventDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteConfigurationSetEventDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteConfigurationSetEventDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSetEventDestinationRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteConfigurationSetEventDestinationRequest(_a0 *sesv2.DeleteConfigurationSetEventDestinationInput) (*request.Request, *sesv2.DeleteConfigurationSetEventDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteConfigurationSetEventDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteConfigurationSetEventDestinationInput) *sesv2.DeleteConfigurationSetEventDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteConfigurationSetEventDestinationOutput)
		}
	}

	return r0, r1
}

// DeleteConfigurationSetEventDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteConfigurationSetEventDestinationWithContext(_a0 context.Context, _a1 *sesv2.DeleteConfigurationSetEventDestinationInput, _a2 ...request.Option) (*sesv2.DeleteConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteConfigurationSetEventDestinationInput, ...request.Option) *sesv2.DeleteConfigurationSetEventDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteConfigurationSetEventDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteConfigurationSetEventDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSetRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteConfigurationSetRequest(_a0 *sesv2.DeleteConfigurationSetInput) (*request.Request, *sesv2.DeleteConfigurationSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteConfigurationSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteConfigurationSetOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteConfigurationSetInput) *sesv2.DeleteConfigurationSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteConfigurationSetOutput)
		}
	}

	return r0, r1
}

// DeleteConfigurationSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteConfigurationSetWithContext(_a0 context.Context, _a1 *sesv2.DeleteConfigurationSetInput, _a2 ...request.Option) (*sesv2.DeleteConfigurationSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteConfigurationSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteConfigurationSetInput, ...request.Option) *sesv2.DeleteConfigurationSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteConfigurationSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteConfigurationSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContact provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteContact(_a0 *sesv2.DeleteContactInput) (*sesv2.DeleteContactOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteContactOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteContactInput) *sesv2.DeleteContactOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteContactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteContactInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactList provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteContactList(_a0 *sesv2.DeleteContactListInput) (*sesv2.DeleteContactListOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteContactListOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteContactListInput) *sesv2.DeleteContactListOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteContactListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteContactListInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactListRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteContactListRequest(_a0 *sesv2.DeleteContactListInput) (*request.Request, *sesv2.DeleteContactListOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteContactListInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteContactListOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteContactListInput) *sesv2.DeleteContactListOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteContactListOutput)
		}
	}

	return r0, r1
}

// DeleteContactListWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteContactListWithContext(_a0 context.Context, _a1 *sesv2.DeleteContactListInput, _a2 ...request.Option) (*sesv2.DeleteContactListOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteContactListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteContactListInput, ...request.Option) *sesv2.DeleteContactListOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteContactListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteContactListInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteContactRequest(_a0 *sesv2.DeleteContactInput) (*request.Request, *sesv2.DeleteContactOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteContactInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteContactOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteContactInput) *sesv2.DeleteContactOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteContactOutput)
		}
	}

	return r0, r1
}

// DeleteContactWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteContactWithContext(_a0 context.Context, _a1 *sesv2.DeleteContactInput, _a2 ...request.Option) (*sesv2.DeleteContactOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteContactOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteContactInput, ...request.Option) *sesv2.DeleteContactOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteContactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteContactInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomVerificationEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteCustomVerificationEmailTemplate(_a0 *sesv2.DeleteCustomVerificationEmailTemplateInput) (*sesv2.DeleteCustomVerificationEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteCustomVerificationEmailTemplateInput) *sesv2.DeleteCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteCustomVerificationEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteCustomVerificationEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomVerificationEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteCustomVerificationEmailTemplateRequest(_a0 *sesv2.DeleteCustomVerificationEmailTemplateInput) (*request.Request, *sesv2.DeleteCustomVerificationEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteCustomVerificationEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteCustomVerificationEmailTemplateInput) *sesv2.DeleteCustomVerificationEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteCustomVerificationEmailTemplateOutput)
		}
	}

	return r0, r1
}

// DeleteCustomVerificationEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteCustomVerificationEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.DeleteCustomVerificationEmailTemplateInput, _a2 ...request.Option) (*sesv2.DeleteCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteCustomVerificationEmailTemplateInput, ...request.Option) *sesv2.DeleteCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteCustomVerificationEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteCustomVerificationEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDedicatedIpPool provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteDedicatedIpPool(_a0 *sesv2.DeleteDedicatedIpPoolInput) (*sesv2.DeleteDedicatedIpPoolOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteDedicatedIpPoolOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteDedicatedIpPoolInput) *sesv2.DeleteDedicatedIpPoolOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteDedicatedIpPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteDedicatedIpPoolInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDedicatedIpPoolRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteDedicatedIpPoolRequest(_a0 *sesv2.DeleteDedicatedIpPoolInput) (*request.Request, *sesv2.DeleteDedicatedIpPoolOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteDedicatedIpPoolInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteDedicatedIpPoolOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteDedicatedIpPoolInput) *sesv2.DeleteDedicatedIpPoolOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteDedicatedIpPoolOutput)
		}
	}

	return r0, r1
}

// DeleteDedicatedIpPoolWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteDedicatedIpPoolWithContext(_a0 context.Context, _a1 *sesv2.DeleteDedicatedIpPoolInput, _a2 ...request.Option) (*sesv2.DeleteDedicatedIpPoolOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteDedicatedIpPoolOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteDedicatedIpPoolInput, ...request.Option) *sesv2.DeleteDedicatedIpPoolOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteDedicatedIpPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteDedicatedIpPoolInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailIdentity provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteEmailIdentity(_a0 *sesv2.DeleteEmailIdentityInput) (*sesv2.DeleteEmailIdentityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteEmailIdentityOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteEmailIdentityInput) *sesv2.DeleteEmailIdentityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailIdentityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteEmailIdentityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailIdentityPolicy provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteEmailIdentityPolicy(_a0 *sesv2.DeleteEmailIdentityPolicyInput) (*sesv2.DeleteEmailIdentityPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteEmailIdentityPolicyOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteEmailIdentityPolicyInput) *sesv2.DeleteEmailIdentityPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailIdentityPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteEmailIdentityPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailIdentityPolicyRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteEmailIdentityPolicyRequest(_a0 *sesv2.DeleteEmailIdentityPolicyInput) (*request.Request, *sesv2.DeleteEmailIdentityPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteEmailIdentityPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteEmailIdentityPolicyOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteEmailIdentityPolicyInput) *sesv2.DeleteEmailIdentityPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteEmailIdentityPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteEmailIdentityPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteEmailIdentityPolicyWithContext(_a0 context.Context, _a1 *sesv2.DeleteEmailIdentityPolicyInput, _a2 ...request.Option) (*sesv2.DeleteEmailIdentityPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteEmailIdentityPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailIdentityPolicyInput, ...request.Option) *sesv2.DeleteEmailIdentityPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailIdentityPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteEmailIdentityPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailIdentityRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteEmailIdentityRequest(_a0 *sesv2.DeleteEmailIdentityInput) (*request.Request, *sesv2.DeleteEmailIdentityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteEmailIdentityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteEmailIdentityOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteEmailIdentityInput) *sesv2.DeleteEmailIdentityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteEmailIdentityOutput)
		}
	}

	return r0, r1
}

// DeleteEmailIdentityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteEmailIdentityWithContext(_a0 context.Context, _a1 *sesv2.DeleteEmailIdentityInput, _a2 ...request.Option) (*sesv2.DeleteEmailIdentityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteEmailIdentityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailIdentityInput, ...request.Option) *sesv2.DeleteEmailIdentityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailIdentityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteEmailIdentityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteEmailTemplate(_a0 *sesv2.DeleteEmailTemplateInput) (*sesv2.DeleteEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteEmailTemplateInput) *sesv2.DeleteEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteEmailTemplateRequest(_a0 *sesv2.DeleteEmailTemplateInput) (*request.Request, *sesv2.DeleteEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteEmailTemplateInput) *sesv2.DeleteEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteEmailTemplateOutput)
		}
	}

	return r0, r1
}

// DeleteEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.DeleteEmailTemplateInput, _a2 ...request.Option) (*sesv2.DeleteEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailTemplateInput, ...request.Option) *sesv2.DeleteEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSuppressedDestination provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteSuppressedDestination(_a0 *sesv2.DeleteSuppressedDestinationInput) (*sesv2.DeleteSuppressedDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.DeleteSuppressedDestinationOutput
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteSuppressedDestinationInput) *sesv2.DeleteSuppressedDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteSuppressedDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteSuppressedDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSuppressedDestinationRequest provides a mock function with given fields: _a0
func (_m *SESV2API) DeleteSuppressedDestinationRequest(_a0 *sesv2.DeleteSuppressedDestinationInput) (*request.Request, *sesv2.DeleteSuppressedDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.DeleteSuppressedDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.DeleteSuppressedDestinationOutput
	if rf, ok := ret.Get(1).(func(*sesv2.DeleteSuppressedDestinationInput) *sesv2.DeleteSuppressedDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.DeleteSuppressedDestinationOutput)
		}
	}

	return r0, r1
}

// DeleteSuppressedDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) DeleteSuppressedDestinationWithContext(_a0 context.Context, _a1 *sesv2.DeleteSuppressedDestinationInput, _a2 ...request.Option) (*sesv2.DeleteSuppressedDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.DeleteSuppressedDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteSuppressedDestinationInput, ...request.Option) *sesv2.DeleteSuppressedDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteSuppressedDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteSuppressedDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: _a0
func (_m *SESV2API) GetAccount(_a0 *sesv2.GetAccountInput) (*sesv2.GetAccountOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetAccountOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetAccountInput) *sesv2.GetAccountOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetAccountOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetAccountInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetAccountRequest(_a0 *sesv2.GetAccountInput) (*request.Request, *sesv2.GetAccountOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetAccountInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetAccountOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetAccountInput) *sesv2.GetAccountOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetAccountOutput)
		}
	}

	return r0, r1
}

// GetAccountWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetAccountWithContext(_a0 context.Context, _a1 *sesv2.GetAccountInput, _a2 ...request.Option) (*sesv2.GetAccountOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetAccountOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetAccountInput, ...request.Option) *sesv2.GetAccountOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetAccountOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetAccountInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlacklistReports provides a mock function with given fields: _a0
func (_m *SESV2API) GetBlacklistReports(_a0 *sesv2.GetBlacklistReportsInput) (*sesv2.GetBlacklistReportsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetBlacklistReportsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetBlacklistReportsInput) *sesv2.GetBlacklistReportsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetBlacklistReportsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetBlacklistReportsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlacklistReportsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetBlacklistReportsRequest(_a0 *sesv2.GetBlacklistReportsInput) (*request.Request, *sesv2.GetBlacklistReportsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetBlacklistReportsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetBlacklistReportsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetBlacklistReportsInput) *sesv2.GetBlacklistReportsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetBlacklistReportsOutput)
		}
	}

	return r0, r1
}

// GetBlacklistReportsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetBlacklistReportsWithContext(_a0 context.Context, _a1 *sesv2.GetBlacklistReportsInput, _a2 ...request.Option) (*sesv2.GetBlacklistReportsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetBlacklistReportsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetBlacklistReportsInput, ...request.Option) *sesv2.GetBlacklistReportsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetBlacklistReportsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetBlacklistReportsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSet provides a mock function with given fields: _a0
func (_m *SESV2API) GetConfigurationSet(_a0 *sesv2.GetConfigurationSetInput) (*sesv2.GetConfigurationSetOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetConfigurationSetOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetConfigurationSetInput) *sesv2.GetConfigurationSetOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetConfigurationSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetConfigurationSetInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSetEventDestinations provides a mock function with given fields: _a0
func (_m *SESV2API) GetConfigurationSetEventDestinations(_a0 *sesv2.GetConfigurationSetEventDestinationsInput) (*sesv2.GetConfigurationSetEventDestinationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetConfigurationSetEventDestinationsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetConfigurationSetEventDestinationsInput) *sesv2.GetConfigurationSetEventDestinationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetConfigurationSetEventDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetConfigurationSetEventDestinationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSetEventDestinationsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetConfigurationSetEventDestinationsRequest(_a0 *sesv2.GetConfigurationSetEventDestinationsInput) (*request.Request, *sesv2.GetConfigurationSetEventDestinationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetConfigurationSetEventDestinationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetConfigurationSetEventDestinationsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetConfigurationSetEventDestinationsInput) *sesv2.GetConfigurationSetEventDestinationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetConfigurationSetEventDestinationsOutput)
		}
	}

	return r0, r1
}

// GetConfigurationSetEventDestinationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetConfigurationSetEventDestinationsWithContext(_a0 context.Context, _a1 *sesv2.GetConfigurationSetEventDestinationsInput, _a2 ...request.Option) (*sesv2.GetConfigurationSetEventDestinationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetConfigurationSetEventDestinationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetConfigurationSetEventDestinationsInput, ...request.Option) *sesv2.GetConfigurationSetEventDestinationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetConfigurationSetEventDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetConfigurationSetEventDestinationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSetRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetConfigurationSetRequest(_a0 *sesv2.GetConfigurationSetInput) (*request.Request, *sesv2.GetConfigurationSetOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetConfigurationSetInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetConfigurationSetOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetConfigurationSetInput) *sesv2.GetConfigurationSetOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetConfigurationSetOutput)
		}
	}

	return r0, r1
}

// GetConfigurationSetWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetConfigurationSetWithContext(_a0 context.Context, _a1 *sesv2.GetConfigurationSetInput, _a2 ...request.Option) (*sesv2.GetConfigurationSetOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetConfigurationSetOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetConfigurationSetInput, ...request.Option) *sesv2.GetConfigurationSetOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetConfigurationSetOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetConfigurationSetInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContact provides a mock function with given fields: _a0
func (_m *SESV2API) GetContact(_a0 *sesv2.GetContactInput) (*sesv2.GetContactOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetContactOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetContactInput) *sesv2.GetContactOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetContactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetContactInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactList provides a mock function with given fields: _a0
func (_m *SESV2API) GetContactList(_a0 *sesv2.GetContactListInput) (*sesv2.GetContactListOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetContactListOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetContactListInput) *sesv2.GetContactListOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetContactListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetContactListInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactListRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetContactListRequest(_a0 *sesv2.GetContactListInput) (*request.Request, *sesv2.GetContactListOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetContactListInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetContactListOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetContactListInput) *sesv2.GetContactListOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetContactListOutput)
		}
	}

	return r0, r1
}

// GetContactListWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetContactListWithContext(_a0 context.Context, _a1 *sesv2.GetContactListInput, _a2 ...request.Option) (*sesv2.GetContactListOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetContactListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetContactListInput, ...request.Option) *sesv2.GetContactListOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetContactListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetContactListInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetContactRequest(_a0 *sesv2.GetContactInput) (*request.Request, *sesv2.GetContactOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetContactInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetContactOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetContactInput) *sesv2.GetContactOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetContactOutput)
		}
	}

	return r0, r1
}

// GetContactWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetContactWithContext(_a0 context.Context, _a1 *sesv2.GetContactInput, _a2 ...request.Option) (*sesv2.GetContactOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetContactOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetContactInput, ...request.Option) *sesv2.GetContactOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetContactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetContactInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomVerificationEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) GetCustomVerificationEmailTemplate(_a0 *sesv2.GetCustomVerificationEmailTemplateInput) (*sesv2.GetCustomVerificationEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetCustomVerificationEmailTemplateInput) *sesv2.GetCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetCustomVerificationEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetCustomVerificationEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomVerificationEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetCustomVerificationEmailTemplateRequest(_a0 *sesv2.GetCustomVerificationEmailTemplateInput) (*request.Request, *sesv2.GetCustomVerificationEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetCustomVerificationEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetCustomVerificationEmailTemplateInput) *sesv2.GetCustomVerificationEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetCustomVerificationEmailTemplateOutput)
		}
	}

	return r0, r1
}

// GetCustomVerificationEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetCustomVerificationEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.GetCustomVerificationEmailTemplateInput, _a2 ...request.Option) (*sesv2.GetCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetCustomVerificationEmailTemplateInput, ...request.Option) *sesv2.GetCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetCustomVerificationEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetCustomVerificationEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIp provides a mock function with given fields: _a0
func (_m *SESV2API) GetDedicatedIp(_a0 *sesv2.GetDedicatedIpInput) (*sesv2.GetDedicatedIpOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetDedicatedIpOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetDedicatedIpInput) *sesv2.GetDedicatedIpOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDedicatedIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetDedicatedIpInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIpRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetDedicatedIpRequest(_a0 *sesv2.GetDedicatedIpInput) (*request.Request, *sesv2.GetDedicatedIpOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetDedicatedIpInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetDedicatedIpOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetDedicatedIpInput) *sesv2.GetDedicatedIpOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetDedicatedIpOutput)
		}
	}

	return r0, r1
}

// GetDedicatedIpWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetDedicatedIpWithContext(_a0 context.Context, _a1 *sesv2.GetDedicatedIpInput, _a2 ...request.Option) (*sesv2.GetDedicatedIpOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetDedicatedIpOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpInput, ...request.Option) *sesv2.GetDedicatedIpOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDedicatedIpOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDedicatedIpInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIps provides a mock function with given fields: _a0
func (_m *SESV2API) GetDedicatedIps(_a0 *sesv2.GetDedicatedIpsInput) (*sesv2.GetDedicatedIpsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetDedicatedIpsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetDedicatedIpsInput) *sesv2.GetDedicatedIpsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDedicatedIpsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetDedicatedIpsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIpsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) GetDedicatedIpsPages(_a0 *sesv2.GetDedicatedIpsInput, _a1 func(*sesv2.GetDedicatedIpsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.GetDedicatedIpsInput, func(*sesv2.GetDedicatedIpsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDedicatedIpsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) GetDedicatedIpsPagesWithContext(_a0 context.Context, _a1 *sesv2.GetDedicatedIpsInput, _a2 func(*sesv2.GetDedicatedIpsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpsInput, func(*sesv2.GetDedicatedIpsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDedicatedIpsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetDedicatedIpsRequest(_a0 *sesv2.GetDedicatedIpsInput) (*request.Request, *sesv2.GetDedicatedIpsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetDedicatedIpsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetDedicatedIpsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetDedicatedIpsInput) *sesv2.GetDedicatedIpsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetDedicatedIpsOutput)
		}
	}

	return r0, r1
}

// GetDedicatedIpsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetDedicatedIpsWithContext(_a0 context.Context, _a1 *sesv2.GetDedicatedIpsInput, _a2 ...request.Option) (*sesv2.GetDedicatedIpsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetDedicatedIpsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpsInput, ...request.Option) *sesv2.GetDedicatedIpsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDedicatedIpsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDedicatedIpsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverabilityDashboardOptions provides a mock function with given fields: _a0
func (_m *SESV2API) GetDeliverabilityDashboardOptions(_a0 *sesv2.GetDeliverabilityDashboardOptionsInput) (*sesv2.GetDeliverabilityDashboardOptionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetDeliverabilityDashboardOptionsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetDeliverabilityDashboardOptionsInput) *sesv2.GetDeliverabilityDashboardOptionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDeliverabilityDashboardOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetDeliverabilityDashboardOptionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverabilityDashboardOptionsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetDeliverabilityDashboardOptionsRequest(_a0 *sesv2.GetDeliverabilityDashboardOptionsInput) (*request.Request, *sesv2.GetDeliverabilityDashboardOptionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetDeliverabilityDashboardOptionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetDeliverabilityDashboardOptionsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetDeliverabilityDashboardOptionsInput) *sesv2.GetDeliverabilityDashboardOptionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetDeliverabilityDashboardOptionsOutput)
		}
	}

	return r0, r1
}

// GetDeliverabilityDashboardOptionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetDeliverabilityDashboardOptionsWithContext(_a0 context.Context, _a1 *sesv2.GetDeliverabilityDashboardOptionsInput, _a2 ...request.Option) (*sesv2.GetDeliverabilityDashboardOptionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetDeliverabilityDashboardOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDeliverabilityDashboardOptionsInput, ...request.Option) *sesv2.GetDeliverabilityDashboardOptionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDeliverabilityDashboardOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDeliverabilityDashboardOptionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverabilityTestReport provides a mock function with given fields: _a0
func (_m *SESV2API) GetDeliverabilityTestReport(_a0 *sesv2.GetDeliverabilityTestReportInput) (*sesv2.GetDeliverabilityTestReportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetDeliverabilityTestReportOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetDeliverabilityTestReportInput) *sesv2.GetDeliverabilityTestReportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDeliverabilityTestReportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetDeliverabilityTestReportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverabilityTestReportRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetDeliverabilityTestReportRequest(_a0 *sesv2.GetDeliverabilityTestReportInput) (*request.Request, *sesv2.GetDeliverabilityTestReportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetDeliverabilityTestReportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetDeliverabilityTestReportOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetDeliverabilityTestReportInput) *sesv2.GetDeliverabilityTestReportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetDeliverabilityTestReportOutput)
		}
	}

	return r0, r1
}

// GetDeliverabilityTestReportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetDeliverabilityTestReportWithContext(_a0 context.Context, _a1 *sesv2.GetDeliverabilityTestReportInput, _a2 ...request.Option) (*sesv2.GetDeliverabilityTestReportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetDeliverabilityTestReportOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDeliverabilityTestReportInput, ...request.Option) *sesv2.GetDeliverabilityTestReportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDeliverabilityTestReportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDeliverabilityTestReportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainDeliverabilityCampaign provides a mock function with given fields: _a0
func (_m *SESV2API) GetDomainDeliverabilityCampaign(_a0 *sesv2.GetDomainDeliverabilityCampaignInput) (*sesv2.GetDomainDeliverabilityCampaignOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetDomainDeliverabilityCampaignOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetDomainDeliverabilityCampaignInput) *sesv2.GetDomainDeliverabilityCampaignOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDomainDeliverabilityCampaignOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetDomainDeliverabilityCampaignInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainDeliverabilityCampaignRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetDomainDeliverabilityCampaignRequest(_a0 *sesv2.GetDomainDeliverabilityCampaignInput) (*request.Request, *sesv2.GetDomainDeliverabilityCampaignOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetDomainDeliverabilityCampaignInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetDomainDeliverabilityCampaignOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetDomainDeliverabilityCampaignInput) *sesv2.GetDomainDeliverabilityCampaignOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetDomainDeliverabilityCampaignOutput)
		}
	}

	return r0, r1
}

// GetDomainDeliverabilityCampaignWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetDomainDeliverabilityCampaignWithContext(_a0 context.Context, _a1 *sesv2.GetDomainDeliverabilityCampaignInput, _a2 ...request.Option) (*sesv2.GetDomainDeliverabilityCampaignOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetDomainDeliverabilityCampaignOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDomainDeliverabilityCampaignInput, ...request.Option) *sesv2.GetDomainDeliverabilityCampaignOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDomainDeliverabilityCampaignOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDomainDeliverabilityCampaignInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainStatisticsReport provides a mock function with given fields: _a0
func (_m *SESV2API) GetDomainStatisticsReport(_a0 *sesv2.GetDomainStatisticsReportInput) (*sesv2.GetDomainStatisticsReportOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetDomainStatisticsReportOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetDomainStatisticsReportInput) *sesv2.GetDomainStatisticsReportOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDomainStatisticsReportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetDomainStatisticsReportInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainStatisticsReportRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetDomainStatisticsReportRequest(_a0 *sesv2.GetDomainStatisticsReportInput) (*request.Request, *sesv2.GetDomainStatisticsReportOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetDomainStatisticsReportInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetDomainStatisticsReportOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetDomainStatisticsReportInput) *sesv2.GetDomainStatisticsReportOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetDomainStatisticsReportOutput)
		}
	}

	return r0, r1
}

// GetDomainStatisticsReportWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetDomainStatisticsReportWithContext(_a0 context.Context, _a1 *sesv2.GetDomainStatisticsReportInput, _a2 ...request.Option) (*sesv2.GetDomainStatisticsReportOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetDomainStatisticsReportOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDomainStatisticsReportInput, ...request.Option) *sesv2.GetDomainStatisticsReportOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDomainStatisticsReportOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDomainStatisticsReportInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailIdentity provides a mock function with given fields: _a0
func (_m *SESV2API) GetEmailIdentity(_a0 *sesv2.GetEmailIdentityInput) (*sesv2.GetEmailIdentityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetEmailIdentityOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetEmailIdentityInput) *sesv2.GetEmailIdentityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailIdentityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetEmailIdentityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailIdentityPolicies provides a mock function with given fields: _a0
func (_m *SESV2API) GetEmailIdentityPolicies(_a0 *sesv2.GetEmailIdentityPoliciesInput) (*sesv2.GetEmailIdentityPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetEmailIdentityPoliciesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetEmailIdentityPoliciesInput) *sesv2.GetEmailIdentityPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailIdentityPoliciesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetEmailIdentityPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailIdentityPoliciesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetEmailIdentityPoliciesRequest(_a0 *sesv2.GetEmailIdentityPoliciesInput) (*request.Request, *sesv2.GetEmailIdentityPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetEmailIdentityPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetEmailIdentityPoliciesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetEmailIdentityPoliciesInput) *sesv2.GetEmailIdentityPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetEmailIdentityPoliciesOutput)
		}
	}

	return r0, r1
}

// GetEmailIdentityPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetEmailIdentityPoliciesWithContext(_a0 context.Context, _a1 *sesv2.GetEmailIdentityPoliciesInput, _a2 ...request.Option) (*sesv2.GetEmailIdentityPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetEmailIdentityPoliciesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailIdentityPoliciesInput, ...request.Option) *sesv2.GetEmailIdentityPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailIdentityPoliciesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetEmailIdentityPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailIdentityRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetEmailIdentityRequest(_a0 *sesv2.GetEmailIdentityInput) (*request.Request, *sesv2.GetEmailIdentityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetEmailIdentityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetEmailIdentityOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetEmailIdentityInput) *sesv2.GetEmailIdentityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetEmailIdentityOutput)
		}
	}

	return r0, r1
}

// GetEmailIdentityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetEmailIdentityWithContext(_a0 context.Context, _a1 *sesv2.GetEmailIdentityInput, _a2 ...request.Option) (*sesv2.GetEmailIdentityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetEmailIdentityOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailIdentityInput, ...request.Option) *sesv2.GetEmailIdentityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailIdentityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetEmailIdentityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) GetEmailTemplate(_a0 *sesv2.GetEmailTemplateInput) (*sesv2.GetEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetEmailTemplateInput) *sesv2.GetEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetEmailTemplateRequest(_a0 *sesv2.GetEmailTemplateInput) (*request.Request, *sesv2.GetEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetEmailTemplateInput) *sesv2.GetEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetEmailTemplateOutput)
		}
	}

	return r0, r1
}

// GetEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.GetEmailTemplateInput, _a2 ...request.Option) (*sesv2.GetEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailTemplateInput, ...request.Option) *sesv2.GetEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportJob provides a mock function with given fields: _a0
func (_m *SESV2API) GetImportJob(_a0 *sesv2.GetImportJobInput) (*sesv2.GetImportJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetImportJobOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetImportJobInput) *sesv2.GetImportJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetImportJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportJobRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetImportJobRequest(_a0 *sesv2.GetImportJobInput) (*request.Request, *sesv2.GetImportJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetImportJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetImportJobOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetImportJobInput) *sesv2.GetImportJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetImportJobOutput)
		}
	}

	return r0, r1
}

// GetImportJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetImportJobWithContext(_a0 context.Context, _a1 *sesv2.GetImportJobInput, _a2 ...request.Option) (*sesv2.GetImportJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetImportJobOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetImportJobInput, ...request.Option) *sesv2.GetImportJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetImportJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetImportJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuppressedDestination provides a mock function with given fields: _a0
func (_m *SESV2API) GetSuppressedDestination(_a0 *sesv2.GetSuppressedDestinationInput) (*sesv2.GetSuppressedDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.GetSuppressedDestinationOutput
	if rf, ok := ret.Get(0).(func(*sesv2.GetSuppressedDestinationInput) *sesv2.GetSuppressedDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetSuppressedDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.GetSuppressedDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuppressedDestinationRequest provides a mock function with given fields: _a0
func (_m *SESV2API) GetSuppressedDestinationRequest(_a0 *sesv2.GetSuppressedDestinationInput) (*request.Request, *sesv2.GetSuppressedDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.GetSuppressedDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.GetSuppressedDestinationOutput
	if rf, ok := ret.Get(1).(func(*sesv2.GetSuppressedDestinationInput) *sesv2.GetSuppressedDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.GetSuppressedDestinationOutput)
		}
	}

	return r0, r1
}

// GetSuppressedDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) GetSuppressedDestinationWithContext(_a0 context.Context, _a1 *sesv2.GetSuppressedDestinationInput, _a2 ...request.Option) (*sesv2.GetSuppressedDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.GetSuppressedDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetSuppressedDestinationInput, ...request.Option) *sesv2.GetSuppressedDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetSuppressedDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetSuppressedDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationSets provides a mock function with given fields: _a0
func (_m *SESV2API) ListConfigurationSets(_a0 *sesv2.ListConfigurationSetsInput) (*sesv2.ListConfigurationSetsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListConfigurationSetsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListConfigurationSetsInput) *sesv2.ListConfigurationSetsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListConfigurationSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListConfigurationSetsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationSetsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListConfigurationSetsPages(_a0 *sesv2.ListConfigurationSetsInput, _a1 func(*sesv2.ListConfigurationSetsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListConfigurationSetsInput, func(*sesv2.ListConfigurationSetsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListConfigurationSetsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListConfigurationSetsPagesWithContext(_a0 context.Context, _a1 *sesv2.ListConfigurationSetsInput, _a2 func(*sesv2.ListConfigurationSetsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListConfigurationSetsInput, func(*sesv2.ListConfigurationSetsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListConfigurationSetsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListConfigurationSetsRequest(_a0 *sesv2.ListConfigurationSetsInput) (*request.Request, *sesv2.ListConfigurationSetsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListConfigurationSetsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListConfigurationSetsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListConfigurationSetsInput) *sesv2.ListConfigurationSetsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListConfigurationSetsOutput)
		}
	}

	return r0, r1
}

// ListConfigurationSetsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListConfigurationSetsWithContext(_a0 context.Context, _a1 *sesv2.ListConfigurationSetsInput, _a2 ...request.Option) (*sesv2.ListConfigurationSetsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListConfigurationSetsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListConfigurationSetsInput, ...request.Option) *sesv2.ListConfigurationSetsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListConfigurationSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListConfigurationSetsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactLists provides a mock function with given fields: _a0
func (_m *SESV2API) ListContactLists(_a0 *sesv2.ListContactListsInput) (*sesv2.ListContactListsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListContactListsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListContactListsInput) *sesv2.ListContactListsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListContactListsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListContactListsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactListsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListContactListsPages(_a0 *sesv2.ListContactListsInput, _a1 func(*sesv2.ListContactListsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListContactListsInput, func(*sesv2.ListContactListsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListContactListsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListContactListsPagesWithContext(_a0 context.Context, _a1 *sesv2.ListContactListsInput, _a2 func(*sesv2.ListContactListsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListContactListsInput, func(*sesv2.ListContactListsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListContactListsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListContactListsRequest(_a0 *sesv2.ListContactListsInput) (*request.Request, *sesv2.ListContactListsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListContactListsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListContactListsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListContactListsInput) *sesv2.ListContactListsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListContactListsOutput)
		}
	}

	return r0, r1
}

// ListContactListsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListContactListsWithContext(_a0 context.Context, _a1 *sesv2.ListContactListsInput, _a2 ...request.Option) (*sesv2.ListContactListsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListContactListsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListContactListsInput, ...request.Option) *sesv2.ListContactListsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListContactListsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListContactListsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContacts provides a mock function with given fields: _a0
func (_m *SESV2API) ListContacts(_a0 *sesv2.ListContactsInput) (*sesv2.ListContactsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListContactsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListContactsInput) *sesv2.ListContactsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListContactsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListContactsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListContactsPages(_a0 *sesv2.ListContactsInput, _a1 func(*sesv2.ListContactsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListContactsInput, func(*sesv2.ListContactsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListContactsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListContactsPagesWithContext(_a0 context.Context, _a1 *sesv2.ListContactsInput, _a2 func(*sesv2.ListContactsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListContactsInput, func(*sesv2.ListContactsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListContactsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListContactsRequest(_a0 *sesv2.ListContactsInput) (*request.Request, *sesv2.ListContactsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListContactsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListContactsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListContactsInput) *sesv2.ListContactsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListContactsOutput)
		}
	}

	return r0, r1
}

// ListContactsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListContactsWithContext(_a0 context.Context, _a1 *sesv2.ListContactsInput, _a2 ...request.Option) (*sesv2.ListContactsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListContactsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListContactsInput, ...request.Option) *sesv2.ListContactsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListContactsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListContactsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomVerificationEmailTemplates provides a mock function with given fields: _a0
func (_m *SESV2API) ListCustomVerificationEmailTemplates(_a0 *sesv2.ListCustomVerificationEmailTemplatesInput) (*sesv2.ListCustomVerificationEmailTemplatesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListCustomVerificationEmailTemplatesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListCustomVerificationEmailTemplatesInput) *sesv2.ListCustomVerificationEmailTemplatesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListCustomVerificationEmailTemplatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListCustomVerificationEmailTemplatesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomVerificationEmailTemplatesPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListCustomVerificationEmailTemplatesPages(_a0 *sesv2.ListCustomVerificationEmailTemplatesInput, _a1 func(*sesv2.ListCustomVerificationEmailTemplatesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListCustomVerificationEmailTemplatesInput, func(*sesv2.ListCustomVerificationEmailTemplatesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCustomVerificationEmailTemplatesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListCustomVerificationEmailTemplatesPagesWithContext(_a0 context.Context, _a1 *sesv2.ListCustomVerificationEmailTemplatesInput, _a2 func(*sesv2.ListCustomVerificationEmailTemplatesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListCustomVerificationEmailTemplatesInput, func(*sesv2.ListCustomVerificationEmailTemplatesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListCustomVerificationEmailTemplatesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListCustomVerificationEmailTemplatesRequest(_a0 *sesv2.ListCustomVerificationEmailTemplatesInput) (*request.Request, *sesv2.ListCustomVerificationEmailTemplatesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListCustomVerificationEmailTemplatesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListCustomVerificationEmailTemplatesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListCustomVerificationEmailTemplatesInput) *sesv2.ListCustomVerificationEmailTemplatesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListCustomVerificationEmailTemplatesOutput)
		}
	}

	return r0, r1
}

// ListCustomVerificationEmailTemplatesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListCustomVerificationEmailTemplatesWithContext(_a0 context.Context, _a1 *sesv2.ListCustomVerificationEmailTemplatesInput, _a2 ...request.Option) (*sesv2.ListCustomVerificationEmailTemplatesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListCustomVerificationEmailTemplatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListCustomVerificationEmailTemplatesInput, ...request.Option) *sesv2.ListCustomVerificationEmailTemplatesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListCustomVerificationEmailTemplatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListCustomVerificationEmailTemplatesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDedicatedIpPools provides a mock function with given fields: _a0
func (_m *SESV2API) ListDedicatedIpPools(_a0 *sesv2.ListDedicatedIpPoolsInput) (*sesv2.ListDedicatedIpPoolsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListDedicatedIpPoolsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListDedicatedIpPoolsInput) *sesv2.ListDedicatedIpPoolsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDedicatedIpPoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListDedicatedIpPoolsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDedicatedIpPoolsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListDedicatedIpPoolsPages(_a0 *sesv2.ListDedicatedIpPoolsInput, _a1 func(*sesv2.ListDedicatedIpPoolsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListDedicatedIpPoolsInput, func(*sesv2.ListDedicatedIpPoolsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDedicatedIpPoolsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListDedicatedIpPoolsPagesWithContext(_a0 context.Context, _a1 *sesv2.ListDedicatedIpPoolsInput, _a2 func(*sesv2.ListDedicatedIpPoolsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDedicatedIpPoolsInput, func(*sesv2.ListDedicatedIpPoolsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDedicatedIpPoolsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListDedicatedIpPoolsRequest(_a0 *sesv2.ListDedicatedIpPoolsInput) (*request.Request, *sesv2.ListDedicatedIpPoolsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListDedicatedIpPoolsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListDedicatedIpPoolsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListDedicatedIpPoolsInput) *sesv2.ListDedicatedIpPoolsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListDedicatedIpPoolsOutput)
		}
	}

	return r0, r1
}

// ListDedicatedIpPoolsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListDedicatedIpPoolsWithContext(_a0 context.Context, _a1 *sesv2.ListDedicatedIpPoolsInput, _a2 ...request.Option) (*sesv2.ListDedicatedIpPoolsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListDedicatedIpPoolsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDedicatedIpPoolsInput, ...request.Option) *sesv2.ListDedicatedIpPoolsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDedicatedIpPoolsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListDedicatedIpPoolsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeliverabilityTestReports provides a mock function with given fields: _a0
func (_m *SESV2API) ListDeliverabilityTestReports(_a0 *sesv2.ListDeliverabilityTestReportsInput) (*sesv2.ListDeliverabilityTestReportsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListDeliverabilityTestReportsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListDeliverabilityTestReportsInput) *sesv2.ListDeliverabilityTestReportsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDeliverabilityTestReportsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListDeliverabilityTestReportsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeliverabilityTestReportsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListDeliverabilityTestReportsPages(_a0 *sesv2.ListDeliverabilityTestReportsInput, _a1 func(*sesv2.ListDeliverabilityTestReportsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListDeliverabilityTestReportsInput, func(*sesv2.ListDeliverabilityTestReportsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDeliverabilityTestReportsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListDeliverabilityTestReportsPagesWithContext(_a0 context.Context, _a1 *sesv2.ListDeliverabilityTestReportsInput, _a2 func(*sesv2.ListDeliverabilityTestReportsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDeliverabilityTestReportsInput, func(*sesv2.ListDeliverabilityTestReportsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDeliverabilityTestReportsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListDeliverabilityTestReportsRequest(_a0 *sesv2.ListDeliverabilityTestReportsInput) (*request.Request, *sesv2.ListDeliverabilityTestReportsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListDeliverabilityTestReportsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListDeliverabilityTestReportsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListDeliverabilityTestReportsInput) *sesv2.ListDeliverabilityTestReportsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListDeliverabilityTestReportsOutput)
		}
	}

	return r0, r1
}

// ListDeliverabilityTestReportsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListDeliverabilityTestReportsWithContext(_a0 context.Context, _a1 *sesv2.ListDeliverabilityTestReportsInput, _a2 ...request.Option) (*sesv2.ListDeliverabilityTestReportsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListDeliverabilityTestReportsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDeliverabilityTestReportsInput, ...request.Option) *sesv2.ListDeliverabilityTestReportsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDeliverabilityTestReportsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListDeliverabilityTestReportsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainDeliverabilityCampaigns provides a mock function with given fields: _a0
func (_m *SESV2API) ListDomainDeliverabilityCampaigns(_a0 *sesv2.ListDomainDeliverabilityCampaignsInput) (*sesv2.ListDomainDeliverabilityCampaignsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListDomainDeliverabilityCampaignsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListDomainDeliverabilityCampaignsInput) *sesv2.ListDomainDeliverabilityCampaignsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDomainDeliverabilityCampaignsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListDomainDeliverabilityCampaignsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainDeliverabilityCampaignsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListDomainDeliverabilityCampaignsPages(_a0 *sesv2.ListDomainDeliverabilityCampaignsInput, _a1 func(*sesv2.ListDomainDeliverabilityCampaignsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListDomainDeliverabilityCampaignsInput, func(*sesv2.ListDomainDeliverabilityCampaignsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDomainDeliverabilityCampaignsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListDomainDeliverabilityCampaignsPagesWithContext(_a0 context.Context, _a1 *sesv2.ListDomainDeliverabilityCampaignsInput, _a2 func(*sesv2.ListDomainDeliverabilityCampaignsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDomainDeliverabilityCampaignsInput, func(*sesv2.ListDomainDeliverabilityCampaignsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListDomainDeliverabilityCampaignsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListDomainDeliverabilityCampaignsRequest(_a0 *sesv2.ListDomainDeliverabilityCampaignsInput) (*request.Request, *sesv2.ListDomainDeliverabilityCampaignsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListDomainDeliverabilityCampaignsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListDomainDeliverabilityCampaignsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListDomainDeliverabilityCampaignsInput) *sesv2.ListDomainDeliverabilityCampaignsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListDomainDeliverabilityCampaignsOutput)
		}
	}

	return r0, r1
}

// ListDomainDeliverabilityCampaignsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListDomainDeliverabilityCampaignsWithContext(_a0 context.Context, _a1 *sesv2.ListDomainDeliverabilityCampaignsInput, _a2 ...request.Option) (*sesv2.ListDomainDeliverabilityCampaignsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListDomainDeliverabilityCampaignsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDomainDeliverabilityCampaignsInput, ...request.Option) *sesv2.ListDomainDeliverabilityCampaignsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDomainDeliverabilityCampaignsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListDomainDeliverabilityCampaignsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEmailIdentities provides a mock function with given fields: _a0
func (_m *SESV2API) ListEmailIdentities(_a0 *sesv2.ListEmailIdentitiesInput) (*sesv2.ListEmailIdentitiesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListEmailIdentitiesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListEmailIdentitiesInput) *sesv2.ListEmailIdentitiesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListEmailIdentitiesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListEmailIdentitiesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEmailIdentitiesPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListEmailIdentitiesPages(_a0 *sesv2.ListEmailIdentitiesInput, _a1 func(*sesv2.ListEmailIdentitiesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListEmailIdentitiesInput, func(*sesv2.ListEmailIdentitiesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEmailIdentitiesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListEmailIdentitiesPagesWithContext(_a0 context.Context, _a1 *sesv2.ListEmailIdentitiesInput, _a2 func(*sesv2.ListEmailIdentitiesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListEmailIdentitiesInput, func(*sesv2.ListEmailIdentitiesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEmailIdentitiesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListEmailIdentitiesRequest(_a0 *sesv2.ListEmailIdentitiesInput) (*request.Request, *sesv2.ListEmailIdentitiesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListEmailIdentitiesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListEmailIdentitiesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListEmailIdentitiesInput) *sesv2.ListEmailIdentitiesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListEmailIdentitiesOutput)
		}
	}

	return r0, r1
}

// ListEmailIdentitiesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListEmailIdentitiesWithContext(_a0 context.Context, _a1 *sesv2.ListEmailIdentitiesInput, _a2 ...request.Option) (*sesv2.ListEmailIdentitiesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListEmailIdentitiesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListEmailIdentitiesInput, ...request.Option) *sesv2.ListEmailIdentitiesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListEmailIdentitiesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListEmailIdentitiesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEmailTemplates provides a mock function with given fields: _a0
func (_m *SESV2API) ListEmailTemplates(_a0 *sesv2.ListEmailTemplatesInput) (*sesv2.ListEmailTemplatesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListEmailTemplatesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListEmailTemplatesInput) *sesv2.ListEmailTemplatesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListEmailTemplatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListEmailTemplatesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEmailTemplatesPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListEmailTemplatesPages(_a0 *sesv2.ListEmailTemplatesInput, _a1 func(*sesv2.ListEmailTemplatesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListEmailTemplatesInput, func(*sesv2.ListEmailTemplatesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEmailTemplatesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListEmailTemplatesPagesWithContext(_a0 context.Context, _a1 *sesv2.ListEmailTemplatesInput, _a2 func(*sesv2.ListEmailTemplatesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListEmailTemplatesInput, func(*sesv2.ListEmailTemplatesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListEmailTemplatesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListEmailTemplatesRequest(_a0 *sesv2.ListEmailTemplatesInput) (*request.Request, *sesv2.ListEmailTemplatesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListEmailTemplatesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListEmailTemplatesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListEmailTemplatesInput) *sesv2.ListEmailTemplatesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListEmailTemplatesOutput)
		}
	}

	return r0, r1
}

// ListEmailTemplatesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListEmailTemplatesWithContext(_a0 context.Context, _a1 *sesv2.ListEmailTemplatesInput, _a2 ...request.Option) (*sesv2.ListEmailTemplatesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListEmailTemplatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListEmailTemplatesInput, ...request.Option) *sesv2.ListEmailTemplatesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListEmailTemplatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListEmailTemplatesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImportJobs provides a mock function with given fields: _a0
func (_m *SESV2API) ListImportJobs(_a0 *sesv2.ListImportJobsInput) (*sesv2.ListImportJobsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListImportJobsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListImportJobsInput) *sesv2.ListImportJobsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListImportJobsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListImportJobsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImportJobsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListImportJobsPages(_a0 *sesv2.ListImportJobsInput, _a1 func(*sesv2.ListImportJobsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListImportJobsInput, func(*sesv2.ListImportJobsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListImportJobsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListImportJobsPagesWithContext(_a0 context.Context, _a1 *sesv2.ListImportJobsInput, _a2 func(*sesv2.ListImportJobsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListImportJobsInput, func(*sesv2.ListImportJobsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListImportJobsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListImportJobsRequest(_a0 *sesv2.ListImportJobsInput) (*request.Request, *sesv2.ListImportJobsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListImportJobsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListImportJobsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListImportJobsInput) *sesv2.ListImportJobsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListImportJobsOutput)
		}
	}

	return r0, r1
}

// ListImportJobsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListImportJobsWithContext(_a0 context.Context, _a1 *sesv2.ListImportJobsInput, _a2 ...request.Option) (*sesv2.ListImportJobsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListImportJobsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListImportJobsInput, ...request.Option) *sesv2.ListImportJobsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListImportJobsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListImportJobsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSuppressedDestinations provides a mock function with given fields: _a0
func (_m *SESV2API) ListSuppressedDestinations(_a0 *sesv2.ListSuppressedDestinationsInput) (*sesv2.ListSuppressedDestinationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListSuppressedDestinationsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListSuppressedDestinationsInput) *sesv2.ListSuppressedDestinationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListSuppressedDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListSuppressedDestinationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSuppressedDestinationsPages provides a mock function with given fields: _a0, _a1
func (_m *SESV2API) ListSuppressedDestinationsPages(_a0 *sesv2.ListSuppressedDestinationsInput, _a1 func(*sesv2.ListSuppressedDestinationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sesv2.ListSuppressedDestinationsInput, func(*sesv2.ListSuppressedDestinationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSuppressedDestinationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SESV2API) ListSuppressedDestinationsPagesWithContext(_a0 context.Context, _a1 *sesv2.ListSuppressedDestinationsInput, _a2 func(*sesv2.ListSuppressedDestinationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListSuppressedDestinationsInput, func(*sesv2.ListSuppressedDestinationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListSuppressedDestinationsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListSuppressedDestinationsRequest(_a0 *sesv2.ListSuppressedDestinationsInput) (*request.Request, *sesv2.ListSuppressedDestinationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListSuppressedDestinationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListSuppressedDestinationsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListSuppressedDestinationsInput) *sesv2.ListSuppressedDestinationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListSuppressedDestinationsOutput)
		}
	}

	return r0, r1
}

// ListSuppressedDestinationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListSuppressedDestinationsWithContext(_a0 context.Context, _a1 *sesv2.ListSuppressedDestinationsInput, _a2 ...request.Option) (*sesv2.ListSuppressedDestinationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListSuppressedDestinationsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListSuppressedDestinationsInput, ...request.Option) *sesv2.ListSuppressedDestinationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListSuppressedDestinationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListSuppressedDestinationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *SESV2API) ListTagsForResource(_a0 *sesv2.ListTagsForResourceInput) (*sesv2.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*sesv2.ListTagsForResourceInput) *sesv2.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *SESV2API) ListTagsForResourceRequest(_a0 *sesv2.ListTagsForResourceInput) (*request.Request, *sesv2.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.ListTagsForResourceOutput
	if rf, ok := ret.Get(1).(func(*sesv2.ListTagsForResourceInput) *sesv2.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) ListTagsForResourceWithContext(_a0 context.Context, _a1 *sesv2.ListTagsForResourceInput, _a2 ...request.Option) (*sesv2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListTagsForResourceInput, ...request.Option) *sesv2.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountDedicatedIpWarmupAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutAccountDedicatedIpWarmupAttributes(_a0 *sesv2.PutAccountDedicatedIpWarmupAttributesInput) (*sesv2.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutAccountDedicatedIpWarmupAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutAccountDedicatedIpWarmupAttributesInput) *sesv2.PutAccountDedicatedIpWarmupAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutAccountDedicatedIpWarmupAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountDedicatedIpWarmupAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutAccountDedicatedIpWarmupAttributesRequest(_a0 *sesv2.PutAccountDedicatedIpWarmupAttributesInput) (*request.Request, *sesv2.PutAccountDedicatedIpWarmupAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutAccountDedicatedIpWarmupAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutAccountDedicatedIpWarmupAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutAccountDedicatedIpWarmupAttributesInput) *sesv2.PutAccountDedicatedIpWarmupAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
		}
	}

	return r0, r1
}

// PutAccountDedicatedIpWarmupAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutAccountDedicatedIpWarmupAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutAccountDedicatedIpWarmupAttributesInput, _a2 ...request.Option) (*sesv2.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutAccountDedicatedIpWarmupAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountDedicatedIpWarmupAttributesInput, ...request.Option) *sesv2.PutAccountDedicatedIpWarmupAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountDedicatedIpWarmupAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountDetails provides a mock function with given fields: _a0
func (_m *SESV2API) PutAccountDetails(_a0 *sesv2.PutAccountDetailsInput) (*sesv2.PutAccountDetailsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutAccountDetailsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutAccountDetailsInput) *sesv2.PutAccountDetailsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountDetailsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutAccountDetailsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountDetailsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutAccountDetailsRequest(_a0 *sesv2.PutAccountDetailsInput) (*request.Request, *sesv2.PutAccountDetailsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutAccountDetailsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutAccountDetailsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutAccountDetailsInput) *sesv2.PutAccountDetailsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutAccountDetailsOutput)
		}
	}

	return r0, r1
}

// PutAccountDetailsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutAccountDetailsWithContext(_a0 context.Context, _a1 *sesv2.PutAccountDetailsInput, _a2 ...request.Option) (*sesv2.PutAccountDetailsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutAccountDetailsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountDetailsInput, ...request.Option) *sesv2.PutAccountDetailsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountDetailsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountDetailsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountSendingAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutAccountSendingAttributes(_a0 *sesv2.PutAccountSendingAttributesInput) (*sesv2.PutAccountSendingAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutAccountSendingAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutAccountSendingAttributesInput) *sesv2.PutAccountSendingAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountSendingAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutAccountSendingAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountSendingAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutAccountSendingAttributesRequest(_a0 *sesv2.PutAccountSendingAttributesInput) (*request.Request, *sesv2.PutAccountSendingAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutAccountSendingAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutAccountSendingAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutAccountSendingAttributesInput) *sesv2.PutAccountSendingAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutAccountSendingAttributesOutput)
		}
	}

	return r0, r1
}

// PutAccountSendingAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutAccountSendingAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutAccountSendingAttributesInput, _a2 ...request.Option) (*sesv2.PutAccountSendingAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutAccountSendingAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountSendingAttributesInput, ...request.Option) *sesv2.PutAccountSendingAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountSendingAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountSendingAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountSuppressionAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutAccountSuppressionAttributes(_a0 *sesv2.PutAccountSuppressionAttributesInput) (*sesv2.PutAccountSuppressionAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutAccountSuppressionAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutAccountSuppressionAttributesInput) *sesv2.PutAccountSuppressionAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountSuppressionAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutAccountSuppressionAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountSuppressionAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutAccountSuppressionAttributesRequest(_a0 *sesv2.PutAccountSuppressionAttributesInput) (*request.Request, *sesv2.PutAccountSuppressionAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutAccountSuppressionAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutAccountSuppressionAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutAccountSuppressionAttributesInput) *sesv2.PutAccountSuppressionAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutAccountSuppressionAttributesOutput)
		}
	}

	return r0, r1
}

// PutAccountSuppressionAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutAccountSuppressionAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutAccountSuppressionAttributesInput, _a2 ...request.Option) (*sesv2.PutAccountSuppressionAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutAccountSuppressionAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountSuppressionAttributesInput, ...request.Option) *sesv2.PutAccountSuppressionAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountSuppressionAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountSuppressionAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetDeliveryOptions provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetDeliveryOptions(_a0 *sesv2.PutConfigurationSetDeliveryOptionsInput) (*sesv2.PutConfigurationSetDeliveryOptionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutConfigurationSetDeliveryOptionsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetDeliveryOptionsInput) *sesv2.PutConfigurationSetDeliveryOptionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetDeliveryOptionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetDeliveryOptionsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetDeliveryOptionsRequest(_a0 *sesv2.PutConfigurationSetDeliveryOptionsInput) (*request.Request, *sesv2.PutConfigurationSetDeliveryOptionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetDeliveryOptionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutConfigurationSetDeliveryOptionsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetDeliveryOptionsInput) *sesv2.PutConfigurationSetDeliveryOptionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
		}
	}

	return r0, r1
}

// PutConfigurationSetDeliveryOptionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutConfigurationSetDeliveryOptionsWithContext(_a0 context.Context, _a1 *sesv2.PutConfigurationSetDeliveryOptionsInput, _a2 ...request.Option) (*sesv2.PutConfigurationSetDeliveryOptionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutConfigurationSetDeliveryOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetDeliveryOptionsInput, ...request.Option) *sesv2.PutConfigurationSetDeliveryOptionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetDeliveryOptionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetReputationOptions provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetReputationOptions(_a0 *sesv2.PutConfigurationSetReputationOptionsInput) (*sesv2.PutConfigurationSetReputationOptionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutConfigurationSetReputationOptionsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetReputationOptionsInput) *sesv2.PutConfigurationSetReputationOptionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetReputationOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetReputationOptionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetReputationOptionsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetReputationOptionsRequest(_a0 *sesv2.PutConfigurationSetReputationOptionsInput) (*request.Request, *sesv2.PutConfigurationSetReputationOptionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetReputationOptionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutConfigurationSetReputationOptionsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetReputationOptionsInput) *sesv2.PutConfigurationSetReputationOptionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutConfigurationSetReputationOptionsOutput)
		}
	}

	return r0, r1
}

// PutConfigurationSetReputationOptionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutConfigurationSetReputationOptionsWithContext(_a0 context.Context, _a1 *sesv2.PutConfigurationSetReputationOptionsInput, _a2 ...request.Option) (*sesv2.PutConfigurationSetReputationOptionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutConfigurationSetReputationOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetReputationOptionsInput, ...request.Option) *sesv2.PutConfigurationSetReputationOptionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetReputationOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetReputationOptionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetSendingOptions provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetSendingOptions(_a0 *sesv2.PutConfigurationSetSendingOptionsInput) (*sesv2.PutConfigurationSetSendingOptionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutConfigurationSetSendingOptionsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetSendingOptionsInput) *sesv2.PutConfigurationSetSendingOptionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetSendingOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetSendingOptionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetSendingOptionsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetSendingOptionsRequest(_a0 *sesv2.PutConfigurationSetSendingOptionsInput) (*request.Request, *sesv2.PutConfigurationSetSendingOptionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetSendingOptionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutConfigurationSetSendingOptionsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetSendingOptionsInput) *sesv2.PutConfigurationSetSendingOptionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutConfigurationSetSendingOptionsOutput)
		}
	}

	return r0, r1
}

// PutConfigurationSetSendingOptionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutConfigurationSetSendingOptionsWithContext(_a0 context.Context, _a1 *sesv2.PutConfigurationSetSendingOptionsInput, _a2 ...request.Option) (*sesv2.PutConfigurationSetSendingOptionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutConfigurationSetSendingOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetSendingOptionsInput, ...request.Option) *sesv2.PutConfigurationSetSendingOptionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetSendingOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetSendingOptionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetSuppressionOptions provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetSuppressionOptions(_a0 *sesv2.PutConfigurationSetSuppressionOptionsInput) (*sesv2.PutConfigurationSetSuppressionOptionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutConfigurationSetSuppressionOptionsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetSuppressionOptionsInput) *sesv2.PutConfigurationSetSuppressionOptionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetSuppressionOptionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetSuppressionOptionsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetSuppressionOptionsRequest(_a0 *sesv2.PutConfigurationSetSuppressionOptionsInput) (*request.Request, *sesv2.PutConfigurationSetSuppressionOptionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetSuppressionOptionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutConfigurationSetSuppressionOptionsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetSuppressionOptionsInput) *sesv2.PutConfigurationSetSuppressionOptionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
		}
	}

	return r0, r1
}

// PutConfigurationSetSuppressionOptionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutConfigurationSetSuppressionOptionsWithContext(_a0 context.Context, _a1 *sesv2.PutConfigurationSetSuppressionOptionsInput, _a2 ...request.Option) (*sesv2.PutConfigurationSetSuppressionOptionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutConfigurationSetSuppressionOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetSuppressionOptionsInput, ...request.Option) *sesv2.PutConfigurationSetSuppressionOptionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetSuppressionOptionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetTrackingOptions provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetTrackingOptions(_a0 *sesv2.PutConfigurationSetTrackingOptionsInput) (*sesv2.PutConfigurationSetTrackingOptionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutConfigurationSetTrackingOptionsOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetTrackingOptionsInput) *sesv2.PutConfigurationSetTrackingOptionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetTrackingOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetTrackingOptionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetTrackingOptionsRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutConfigurationSetTrackingOptionsRequest(_a0 *sesv2.PutConfigurationSetTrackingOptionsInput) (*request.Request, *sesv2.PutConfigurationSetTrackingOptionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutConfigurationSetTrackingOptionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutConfigurationSetTrackingOptionsOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutConfigurationSetTrackingOptionsInput) *sesv2.PutConfigurationSetTrackingOptionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutConfigurationSetTrackingOptionsOutput)
		}
	}

	return r0, r1
}

// PutConfigurationSetTrackingOptionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutConfigurationSetTrackingOptionsWithContext(_a0 context.Context, _a1 *sesv2.PutConfigurationSetTrackingOptionsInput, _a2 ...request.Option) (*sesv2.PutConfigurationSetTrackingOptionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutConfigurationSetTrackingOptionsOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetTrackingOptionsInput, ...request.Option) *sesv2.PutConfigurationSetTrackingOptionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetTrackingOptionsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetTrackingOptionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpInPool provides a mock function with given fields: _a0
func (_m *SESV2API) PutDedicatedIpInPool(_a0 *sesv2.PutDedicatedIpInPoolInput) (*sesv2.PutDedicatedIpInPoolOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutDedicatedIpInPoolOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutDedicatedIpInPoolInput) *sesv2.PutDedicatedIpInPoolOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDedicatedIpInPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutDedicatedIpInPoolInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpInPoolRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutDedicatedIpInPoolRequest(_a0 *sesv2.PutDedicatedIpInPoolInput) (*request.Request, *sesv2.PutDedicatedIpInPoolOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutDedicatedIpInPoolInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutDedicatedIpInPoolOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutDedicatedIpInPoolInput) *sesv2.PutDedicatedIpInPoolOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutDedicatedIpInPoolOutput)
		}
	}

	return r0, r1
}

// PutDedicatedIpInPoolWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutDedicatedIpInPoolWithContext(_a0 context.Context, _a1 *sesv2.PutDedicatedIpInPoolInput, _a2 ...request.Option) (*sesv2.PutDedicatedIpInPoolOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutDedicatedIpInPoolOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDedicatedIpInPoolInput, ...request.Option) *sesv2.PutDedicatedIpInPoolOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDedicatedIpInPoolOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutDedicatedIpInPoolInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpWarmupAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutDedicatedIpWarmupAttributes(_a0 *sesv2.PutDedicatedIpWarmupAttributesInput) (*sesv2.PutDedicatedIpWarmupAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutDedicatedIpWarmupAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutDedicatedIpWarmupAttributesInput) *sesv2.PutDedicatedIpWarmupAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDedicatedIpWarmupAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutDedicatedIpWarmupAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpWarmupAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutDedicatedIpWarmupAttributesRequest(_a0 *sesv2.PutDedicatedIpWarmupAttributesInput) (*request.Request, *sesv2.PutDedicatedIpWarmupAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutDedicatedIpWarmupAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutDedicatedIpWarmupAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutDedicatedIpWarmupAttributesInput) *sesv2.PutDedicatedIpWarmupAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutDedicatedIpWarmupAttributesOutput)
		}
	}

	return r0, r1
}

// PutDedicatedIpWarmupAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutDedicatedIpWarmupAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutDedicatedIpWarmupAttributesInput, _a2 ...request.Option) (*sesv2.PutDedicatedIpWarmupAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutDedicatedIpWarmupAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDedicatedIpWarmupAttributesInput, ...request.Option) *sesv2.PutDedicatedIpWarmupAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDedicatedIpWarmupAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutDedicatedIpWarmupAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliverabilityDashboardOption provides a mock function with given fields: _a0
func (_m *SESV2API) PutDeliverabilityDashboardOption(_a0 *sesv2.PutDeliverabilityDashboardOptionInput) (*sesv2.PutDeliverabilityDashboardOptionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutDeliverabilityDashboardOptionOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutDeliverabilityDashboardOptionInput) *sesv2.PutDeliverabilityDashboardOptionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDeliverabilityDashboardOptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutDeliverabilityDashboardOptionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliverabilityDashboardOptionRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutDeliverabilityDashboardOptionRequest(_a0 *sesv2.PutDeliverabilityDashboardOptionInput) (*request.Request, *sesv2.PutDeliverabilityDashboardOptionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutDeliverabilityDashboardOptionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutDeliverabilityDashboardOptionOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutDeliverabilityDashboardOptionInput) *sesv2.PutDeliverabilityDashboardOptionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutDeliverabilityDashboardOptionOutput)
		}
	}

	return r0, r1
}

// PutDeliverabilityDashboardOptionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutDeliverabilityDashboardOptionWithContext(_a0 context.Context, _a1 *sesv2.PutDeliverabilityDashboardOptionInput, _a2 ...request.Option) (*sesv2.PutDeliverabilityDashboardOptionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutDeliverabilityDashboardOptionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDeliverabilityDashboardOptionInput, ...request.Option) *sesv2.PutDeliverabilityDashboardOptionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDeliverabilityDashboardOptionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutDeliverabilityDashboardOptionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityConfigurationSetAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityConfigurationSetAttributes(_a0 *sesv2.PutEmailIdentityConfigurationSetAttributesInput) (*sesv2.PutEmailIdentityConfigurationSetAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutEmailIdentityConfigurationSetAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityConfigurationSetAttributesInput) *sesv2.PutEmailIdentityConfigurationSetAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityConfigurationSetAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityConfigurationSetAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityConfigurationSetAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityConfigurationSetAttributesRequest(_a0 *sesv2.PutEmailIdentityConfigurationSetAttributesInput) (*request.Request, *sesv2.PutEmailIdentityConfigurationSetAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityConfigurationSetAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutEmailIdentityConfigurationSetAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityConfigurationSetAttributesInput) *sesv2.PutEmailIdentityConfigurationSetAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutEmailIdentityConfigurationSetAttributesOutput)
		}
	}

	return r0, r1
}

// PutEmailIdentityConfigurationSetAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutEmailIdentityConfigurationSetAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutEmailIdentityConfigurationSetAttributesInput, _a2 ...request.Option) (*sesv2.PutEmailIdentityConfigurationSetAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutEmailIdentityConfigurationSetAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityConfigurationSetAttributesInput, ...request.Option) *sesv2.PutEmailIdentityConfigurationSetAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityConfigurationSetAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityConfigurationSetAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityDkimAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityDkimAttributes(_a0 *sesv2.PutEmailIdentityDkimAttributesInput) (*sesv2.PutEmailIdentityDkimAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutEmailIdentityDkimAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityDkimAttributesInput) *sesv2.PutEmailIdentityDkimAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityDkimAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityDkimAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityDkimAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityDkimAttributesRequest(_a0 *sesv2.PutEmailIdentityDkimAttributesInput) (*request.Request, *sesv2.PutEmailIdentityDkimAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityDkimAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutEmailIdentityDkimAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityDkimAttributesInput) *sesv2.PutEmailIdentityDkimAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutEmailIdentityDkimAttributesOutput)
		}
	}

	return r0, r1
}

// PutEmailIdentityDkimAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutEmailIdentityDkimAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutEmailIdentityDkimAttributesInput, _a2 ...request.Option) (*sesv2.PutEmailIdentityDkimAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutEmailIdentityDkimAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityDkimAttributesInput, ...request.Option) *sesv2.PutEmailIdentityDkimAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityDkimAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityDkimAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityDkimSigningAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityDkimSigningAttributes(_a0 *sesv2.PutEmailIdentityDkimSigningAttributesInput) (*sesv2.PutEmailIdentityDkimSigningAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutEmailIdentityDkimSigningAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityDkimSigningAttributesInput) *sesv2.PutEmailIdentityDkimSigningAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityDkimSigningAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityDkimSigningAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityDkimSigningAttributesRequest(_a0 *sesv2.PutEmailIdentityDkimSigningAttributesInput) (*request.Request, *sesv2.PutEmailIdentityDkimSigningAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityDkimSigningAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutEmailIdentityDkimSigningAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityDkimSigningAttributesInput) *sesv2.PutEmailIdentityDkimSigningAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
		}
	}

	return r0, r1
}

// PutEmailIdentityDkimSigningAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutEmailIdentityDkimSigningAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutEmailIdentityDkimSigningAttributesInput, _a2 ...request.Option) (*sesv2.PutEmailIdentityDkimSigningAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutEmailIdentityDkimSigningAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityDkimSigningAttributesInput, ...request.Option) *sesv2.PutEmailIdentityDkimSigningAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityDkimSigningAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityFeedbackAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityFeedbackAttributes(_a0 *sesv2.PutEmailIdentityFeedbackAttributesInput) (*sesv2.PutEmailIdentityFeedbackAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutEmailIdentityFeedbackAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityFeedbackAttributesInput) *sesv2.PutEmailIdentityFeedbackAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityFeedbackAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityFeedbackAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityFeedbackAttributesRequest(_a0 *sesv2.PutEmailIdentityFeedbackAttributesInput) (*request.Request, *sesv2.PutEmailIdentityFeedbackAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityFeedbackAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutEmailIdentityFeedbackAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityFeedbackAttributesInput) *sesv2.PutEmailIdentityFeedbackAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
		}
	}

	return r0, r1
}

// PutEmailIdentityFeedbackAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutEmailIdentityFeedbackAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutEmailIdentityFeedbackAttributesInput, _a2 ...request.Option) (*sesv2.PutEmailIdentityFeedbackAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutEmailIdentityFeedbackAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityFeedbackAttributesInput, ...request.Option) *sesv2.PutEmailIdentityFeedbackAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityFeedbackAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityMailFromAttributes provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityMailFromAttributes(_a0 *sesv2.PutEmailIdentityMailFromAttributesInput) (*sesv2.PutEmailIdentityMailFromAttributesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutEmailIdentityMailFromAttributesOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityMailFromAttributesInput) *sesv2.PutEmailIdentityMailFromAttributesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityMailFromAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityMailFromAttributesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityMailFromAttributesRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutEmailIdentityMailFromAttributesRequest(_a0 *sesv2.PutEmailIdentityMailFromAttributesInput) (*request.Request, *sesv2.PutEmailIdentityMailFromAttributesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutEmailIdentityMailFromAttributesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutEmailIdentityMailFromAttributesOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutEmailIdentityMailFromAttributesInput) *sesv2.PutEmailIdentityMailFromAttributesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutEmailIdentityMailFromAttributesOutput)
		}
	}

	return r0, r1
}

// PutEmailIdentityMailFromAttributesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutEmailIdentityMailFromAttributesWithContext(_a0 context.Context, _a1 *sesv2.PutEmailIdentityMailFromAttributesInput, _a2 ...request.Option) (*sesv2.PutEmailIdentityMailFromAttributesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutEmailIdentityMailFromAttributesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityMailFromAttributesInput, ...request.Option) *sesv2.PutEmailIdentityMailFromAttributesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityMailFromAttributesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityMailFromAttributesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSuppressedDestination provides a mock function with given fields: _a0
func (_m *SESV2API) PutSuppressedDestination(_a0 *sesv2.PutSuppressedDestinationInput) (*sesv2.PutSuppressedDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.PutSuppressedDestinationOutput
	if rf, ok := ret.Get(0).(func(*sesv2.PutSuppressedDestinationInput) *sesv2.PutSuppressedDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutSuppressedDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.PutSuppressedDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSuppressedDestinationRequest provides a mock function with given fields: _a0
func (_m *SESV2API) PutSuppressedDestinationRequest(_a0 *sesv2.PutSuppressedDestinationInput) (*request.Request, *sesv2.PutSuppressedDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.PutSuppressedDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.PutSuppressedDestinationOutput
	if rf, ok := ret.Get(1).(func(*sesv2.PutSuppressedDestinationInput) *sesv2.PutSuppressedDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.PutSuppressedDestinationOutput)
		}
	}

	return r0, r1
}

// PutSuppressedDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) PutSuppressedDestinationWithContext(_a0 context.Context, _a1 *sesv2.PutSuppressedDestinationInput, _a2 ...request.Option) (*sesv2.PutSuppressedDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.PutSuppressedDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutSuppressedDestinationInput, ...request.Option) *sesv2.PutSuppressedDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutSuppressedDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutSuppressedDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBulkEmail provides a mock function with given fields: _a0
func (_m *SESV2API) SendBulkEmail(_a0 *sesv2.SendBulkEmailInput) (*sesv2.SendBulkEmailOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.SendBulkEmailOutput
	if rf, ok := ret.Get(0).(func(*sesv2.SendBulkEmailInput) *sesv2.SendBulkEmailOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendBulkEmailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.SendBulkEmailInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBulkEmailRequest provides a mock function with given fields: _a0
func (_m *SESV2API) SendBulkEmailRequest(_a0 *sesv2.SendBulkEmailInput) (*request.Request, *sesv2.SendBulkEmailOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.SendBulkEmailInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.SendBulkEmailOutput
	if rf, ok := ret.Get(1).(func(*sesv2.SendBulkEmailInput) *sesv2.SendBulkEmailOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.SendBulkEmailOutput)
		}
	}

	return r0, r1
}

// SendBulkEmailWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) SendBulkEmailWithContext(_a0 context.Context, _a1 *sesv2.SendBulkEmailInput, _a2 ...request.Option) (*sesv2.SendBulkEmailOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.SendBulkEmailOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendBulkEmailInput, ...request.Option) *sesv2.SendBulkEmailOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendBulkEmailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.SendBulkEmailInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCustomVerificationEmail provides a mock function with given fields: _a0
func (_m *SESV2API) SendCustomVerificationEmail(_a0 *sesv2.SendCustomVerificationEmailInput) (*sesv2.SendCustomVerificationEmailOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.SendCustomVerificationEmailOutput
	if rf, ok := ret.Get(0).(func(*sesv2.SendCustomVerificationEmailInput) *sesv2.SendCustomVerificationEmailOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendCustomVerificationEmailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.SendCustomVerificationEmailInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCustomVerificationEmailRequest provides a mock function with given fields: _a0
func (_m *SESV2API) SendCustomVerificationEmailRequest(_a0 *sesv2.SendCustomVerificationEmailInput) (*request.Request, *sesv2.SendCustomVerificationEmailOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.SendCustomVerificationEmailInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.SendCustomVerificationEmailOutput
	if rf, ok := ret.Get(1).(func(*sesv2.SendCustomVerificationEmailInput) *sesv2.SendCustomVerificationEmailOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.SendCustomVerificationEmailOutput)
		}
	}

	return r0, r1
}

// SendCustomVerificationEmailWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) SendCustomVerificationEmailWithContext(_a0 context.Context, _a1 *sesv2.SendCustomVerificationEmailInput, _a2 ...request.Option) (*sesv2.SendCustomVerificationEmailOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.SendCustomVerificationEmailOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendCustomVerificationEmailInput, ...request.Option) *sesv2.SendCustomVerificationEmailOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendCustomVerificationEmailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.SendCustomVerificationEmailInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: _a0
func (_m *SESV2API) SendEmail(_a0 *sesv2.SendEmailInput) (*sesv2.SendEmailOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.SendEmailOutput
	if rf, ok := ret.Get(0).(func(*sesv2.SendEmailInput) *sesv2.SendEmailOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendEmailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.SendEmailInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmailRequest provides a mock function with given fields: _a0
func (_m *SESV2API) SendEmailRequest(_a0 *sesv2.SendEmailInput) (*request.Request, *sesv2.SendEmailOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.SendEmailInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.SendEmailOutput
	if rf, ok := ret.Get(1).(func(*sesv2.SendEmailInput) *sesv2.SendEmailOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.SendEmailOutput)
		}
	}

	return r0, r1
}

// SendEmailWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) SendEmailWithContext(_a0 context.Context, _a1 *sesv2.SendEmailInput, _a2 ...request.Option) (*sesv2.SendEmailOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.SendEmailOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendEmailInput, ...request.Option) *sesv2.SendEmailOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendEmailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.SendEmailInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: _a0
func (_m *SESV2API) TagResource(_a0 *sesv2.TagResourceInput) (*sesv2.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*sesv2.TagResourceInput) *sesv2.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *SESV2API) TagResourceRequest(_a0 *sesv2.TagResourceInput) (*request.Request, *sesv2.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.TagResourceOutput
	if rf, ok := ret.Get(1).(func(*sesv2.TagResourceInput) *sesv2.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.TagResourceOutput)
		}
	}

	return r0, r1
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) TagResourceWithContext(_a0 context.Context, _a1 *sesv2.TagResourceInput, _a2 ...request.Option) (*sesv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.TagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.TagResourceInput, ...request.Option) *sesv2.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.TagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestRenderEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) TestRenderEmailTemplate(_a0 *sesv2.TestRenderEmailTemplateInput) (*sesv2.TestRenderEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.TestRenderEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.TestRenderEmailTemplateInput) *sesv2.TestRenderEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.TestRenderEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.TestRenderEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestRenderEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) TestRenderEmailTemplateRequest(_a0 *sesv2.TestRenderEmailTemplateInput) (*request.Request, *sesv2.TestRenderEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.TestRenderEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.TestRenderEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.TestRenderEmailTemplateInput) *sesv2.TestRenderEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.TestRenderEmailTemplateOutput)
		}
	}

	return r0, r1
}

// TestRenderEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) TestRenderEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.TestRenderEmailTemplateInput, _a2 ...request.Option) (*sesv2.TestRenderEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.TestRenderEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.TestRenderEmailTemplateInput, ...request.Option) *sesv2.TestRenderEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.TestRenderEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.TestRenderEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: _a0
func (_m *SESV2API) UntagResource(_a0 *sesv2.UntagResourceInput) (*sesv2.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*sesv2.UntagResourceInput) *sesv2.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *SESV2API) UntagResourceRequest(_a0 *sesv2.UntagResourceInput) (*request.Request, *sesv2.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.UntagResourceOutput
	if rf, ok := ret.Get(1).(func(*sesv2.UntagResourceInput) *sesv2.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.UntagResourceOutput)
		}
	}

	return r0, r1
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) UntagResourceWithContext(_a0 context.Context, _a1 *sesv2.UntagResourceInput, _a2 ...request.Option) (*sesv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UntagResourceInput, ...request.Option) *sesv2.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UntagResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetEventDestination provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateConfigurationSetEventDestination(_a0 *sesv2.UpdateConfigurationSetEventDestinationInput) (*sesv2.UpdateConfigurationSetEventDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.UpdateConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateConfigurationSetEventDestinationInput) *sesv2.UpdateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateConfigurationSetEventDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateConfigurationSetEventDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetEventDestinationRequest provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateConfigurationSetEventDestinationRequest(_a0 *sesv2.UpdateConfigurationSetEventDestinationInput) (*request.Request, *sesv2.UpdateConfigurationSetEventDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateConfigurationSetEventDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.UpdateConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateConfigurationSetEventDestinationInput) *sesv2.UpdateConfigurationSetEventDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.UpdateConfigurationSetEventDestinationOutput)
		}
	}

	return r0, r1
}

// UpdateConfigurationSetEventDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) UpdateConfigurationSetEventDestinationWithContext(_a0 context.Context, _a1 *sesv2.UpdateConfigurationSetEventDestinationInput, _a2 ...request.Option) (*sesv2.UpdateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.UpdateConfigurationSetEventDestinationOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateConfigurationSetEventDestinationInput, ...request.Option) *sesv2.UpdateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateConfigurationSetEventDestinationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateConfigurationSetEventDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContact provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateContact(_a0 *sesv2.UpdateContactInput) (*sesv2.UpdateContactOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.UpdateContactOutput
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateContactInput) *sesv2.UpdateContactOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateContactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateContactInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactList provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateContactList(_a0 *sesv2.UpdateContactListInput) (*sesv2.UpdateContactListOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.UpdateContactListOutput
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateContactListInput) *sesv2.UpdateContactListOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateContactListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateContactListInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactListRequest provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateContactListRequest(_a0 *sesv2.UpdateContactListInput) (*request.Request, *sesv2.UpdateContactListOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateContactListInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.UpdateContactListOutput
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateContactListInput) *sesv2.UpdateContactListOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.UpdateContactListOutput)
		}
	}

	return r0, r1
}

// UpdateContactListWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) UpdateContactListWithContext(_a0 context.Context, _a1 *sesv2.UpdateContactListInput, _a2 ...request.Option) (*sesv2.UpdateContactListOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.UpdateContactListOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateContactListInput, ...request.Option) *sesv2.UpdateContactListOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateContactListOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateContactListInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactRequest provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateContactRequest(_a0 *sesv2.UpdateContactInput) (*request.Request, *sesv2.UpdateContactOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateContactInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.UpdateContactOutput
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateContactInput) *sesv2.UpdateContactOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.UpdateContactOutput)
		}
	}

	return r0, r1
}

// UpdateContactWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) UpdateContactWithContext(_a0 context.Context, _a1 *sesv2.UpdateContactInput, _a2 ...request.Option) (*sesv2.UpdateContactOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.UpdateContactOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateContactInput, ...request.Option) *sesv2.UpdateContactOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateContactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateContactInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomVerificationEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateCustomVerificationEmailTemplate(_a0 *sesv2.UpdateCustomVerificationEmailTemplateInput) (*sesv2.UpdateCustomVerificationEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.UpdateCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateCustomVerificationEmailTemplateInput) *sesv2.UpdateCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateCustomVerificationEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateCustomVerificationEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomVerificationEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateCustomVerificationEmailTemplateRequest(_a0 *sesv2.UpdateCustomVerificationEmailTemplateInput) (*request.Request, *sesv2.UpdateCustomVerificationEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateCustomVerificationEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.UpdateCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateCustomVerificationEmailTemplateInput) *sesv2.UpdateCustomVerificationEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.UpdateCustomVerificationEmailTemplateOutput)
		}
	}

	return r0, r1
}

// UpdateCustomVerificationEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) UpdateCustomVerificationEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.UpdateCustomVerificationEmailTemplateInput, _a2 ...request.Option) (*sesv2.UpdateCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.UpdateCustomVerificationEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateCustomVerificationEmailTemplateInput, ...request.Option) *sesv2.UpdateCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateCustomVerificationEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateCustomVerificationEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailIdentityPolicy provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateEmailIdentityPolicy(_a0 *sesv2.UpdateEmailIdentityPolicyInput) (*sesv2.UpdateEmailIdentityPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.UpdateEmailIdentityPolicyOutput
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateEmailIdentityPolicyInput) *sesv2.UpdateEmailIdentityPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateEmailIdentityPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateEmailIdentityPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailIdentityPolicyRequest provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateEmailIdentityPolicyRequest(_a0 *sesv2.UpdateEmailIdentityPolicyInput) (*request.Request, *sesv2.UpdateEmailIdentityPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateEmailIdentityPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.UpdateEmailIdentityPolicyOutput
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateEmailIdentityPolicyInput) *sesv2.UpdateEmailIdentityPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.UpdateEmailIdentityPolicyOutput)
		}
	}

	return r0, r1
}

// UpdateEmailIdentityPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) UpdateEmailIdentityPolicyWithContext(_a0 context.Context, _a1 *sesv2.UpdateEmailIdentityPolicyInput, _a2 ...request.Option) (*sesv2.UpdateEmailIdentityPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.UpdateEmailIdentityPolicyOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateEmailIdentityPolicyInput, ...request.Option) *sesv2.UpdateEmailIdentityPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateEmailIdentityPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateEmailIdentityPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailTemplate provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateEmailTemplate(_a0 *sesv2.UpdateEmailTemplateInput) (*sesv2.UpdateEmailTemplateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *sesv2.UpdateEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateEmailTemplateInput) *sesv2.UpdateEmailTemplateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateEmailTemplateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailTemplateRequest provides a mock function with given fields: _a0
func (_m *SESV2API) UpdateEmailTemplateRequest(_a0 *sesv2.UpdateEmailTemplateInput) (*request.Request, *sesv2.UpdateEmailTemplateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*sesv2.UpdateEmailTemplateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *sesv2.UpdateEmailTemplateOutput
	if rf, ok := ret.Get(1).(func(*sesv2.UpdateEmailTemplateInput) *sesv2.UpdateEmailTemplateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sesv2.UpdateEmailTemplateOutput)
		}
	}

	return r0, r1
}

// UpdateEmailTemplateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *SESV2API) UpdateEmailTemplateWithContext(_a0 context.Context, _a1 *sesv2.UpdateEmailTemplateInput, _a2 ...request.Option) (*sesv2.UpdateEmailTemplateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *sesv2.UpdateEmailTemplateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateEmailTemplateInput, ...request.Option) *sesv2.UpdateEmailTemplateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateEmailTemplateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateEmailTemplateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
