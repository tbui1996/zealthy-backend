// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt"
	mock "github.com/stretchr/testify/mock"

	rsa "crypto/rsa"
)

// Jwt is an autogenerated mock type for the Jwt type
type Jwt struct {
	mock.Mock
}

// ParseRSAPublicKeyFromPEM provides a mock function with given fields: key
func (_m *Jwt) ParseRSAPublicKeyFromPEM(key []byte) (*rsa.PublicKey, error) {
	ret := _m.Called(key)

	var r0 *rsa.PublicKey
	if rf, ok := ret.Get(0).(func([]byte) *rsa.PublicKey); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PublicKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseWithClaims provides a mock function with given fields: tokenString, claims, keyFunc
func (_m *Jwt) ParseWithClaims(tokenString string, claims jwt.Claims, keyFunc jwt.Keyfunc) (*jwt.Token, error) {
	ret := _m.Called(tokenString, claims, keyFunc)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string, jwt.Claims, jwt.Keyfunc) *jwt.Token); ok {
		r0 = rf(tokenString, claims, keyFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, jwt.Claims, jwt.Keyfunc) error); ok {
		r1 = rf(tokenString, claims, keyFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
