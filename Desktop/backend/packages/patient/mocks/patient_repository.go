// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	appointmenterror "github.com/circulohealth/sonar-backend/packages/patient/pkg/data/appointment_error"

	mock "github.com/stretchr/testify/mock"

	model "github.com/circulohealth/sonar-backend/packages/patient/pkg/model"
)

// PatientRepository is an autogenerated mock type for the PatientRepository type
type PatientRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: patientId
func (_m *PatientRepository) Find(patientId string) (*model.Patient, *appointmenterror.AppointmentRepositoryError) {
	ret := _m.Called(patientId)

	var r0 *model.Patient
	if rf, ok := ret.Get(0).(func(string) *model.Patient); ok {
		r0 = rf(patientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Patient)
		}
	}

	var r1 *appointmenterror.AppointmentRepositoryError
	if rf, ok := ret.Get(1).(func(string) *appointmenterror.AppointmentRepositoryError); ok {
		r1 = rf(patientId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appointmenterror.AppointmentRepositoryError)
		}
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *PatientRepository) FindAll() (*[]model.Patient, *appointmenterror.AppointmentRepositoryError) {
	ret := _m.Called()

	var r0 *[]model.Patient
	if rf, ok := ret.Get(0).(func() *[]model.Patient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Patient)
		}
	}

	var r1 *appointmenterror.AppointmentRepositoryError
	if rf, ok := ret.Get(1).(func() *appointmenterror.AppointmentRepositoryError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appointmenterror.AppointmentRepositoryError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: patient
func (_m *PatientRepository) Save(patient *model.Patient) *appointmenterror.AppointmentRepositoryError {
	ret := _m.Called(patient)

	var r0 *appointmenterror.AppointmentRepositoryError
	if rf, ok := ret.Get(0).(func(*model.Patient) *appointmenterror.AppointmentRepositoryError); ok {
		r0 = rf(patient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appointmenterror.AppointmentRepositoryError)
		}
	}

	return r0
}
