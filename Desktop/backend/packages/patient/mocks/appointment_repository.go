// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	appointmenterror "github.com/circulohealth/sonar-backend/packages/patient/pkg/data/appointment_error"

	mock "github.com/stretchr/testify/mock"

	model "github.com/circulohealth/sonar-backend/packages/patient/pkg/model"
)

// AppointmentRepository is an autogenerated mock type for the AppointmentRepository type
type AppointmentRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: appointment
func (_m *AppointmentRepository) Delete(appointment *model.Appointment) *appointmenterror.AppointmentRepositoryError {
	ret := _m.Called(appointment)

	var r0 *appointmenterror.AppointmentRepositoryError
	if rf, ok := ret.Get(0).(func(*model.Appointment) *appointmenterror.AppointmentRepositoryError); ok {
		r0 = rf(appointment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appointmenterror.AppointmentRepositoryError)
		}
	}

	return r0
}

// Find provides a mock function with given fields: appointmentId
func (_m *AppointmentRepository) Find(appointmentId string) (*model.Appointment, *appointmenterror.AppointmentRepositoryError) {
	ret := _m.Called(appointmentId)

	var r0 *model.Appointment
	if rf, ok := ret.Get(0).(func(string) *model.Appointment); ok {
		r0 = rf(appointmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Appointment)
		}
	}

	var r1 *appointmenterror.AppointmentRepositoryError
	if rf, ok := ret.Get(1).(func(string) *appointmenterror.AppointmentRepositoryError); ok {
		r1 = rf(appointmentId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appointmenterror.AppointmentRepositoryError)
		}
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *AppointmentRepository) FindAll() (*[]model.JoinResult, *appointmenterror.AppointmentRepositoryError) {
	ret := _m.Called()

	var r0 *[]model.JoinResult
	if rf, ok := ret.Get(0).(func() *[]model.JoinResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.JoinResult)
		}
	}

	var r1 *appointmenterror.AppointmentRepositoryError
	if rf, ok := ret.Get(1).(func() *appointmenterror.AppointmentRepositoryError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*appointmenterror.AppointmentRepositoryError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: appointment
func (_m *AppointmentRepository) Save(appointment *model.Appointment) *appointmenterror.AppointmentRepositoryError {
	ret := _m.Called(appointment)

	var r0 *appointmenterror.AppointmentRepositoryError
	if rf, ok := ret.Get(0).(func(*model.Appointment) *appointmenterror.AppointmentRepositoryError); ok {
		r0 = rf(appointment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appointmenterror.AppointmentRepositoryError)
		}
	}

	return r0
}
