resource "aws_cloudwatch_log_group" "http_gateway_logs_template" {
  name       = local.http_gateway_logs_name
  kms_key_id = aws_kms_key.http_gateway_logs_kms_key.arn
}

resource "aws_apigatewayv2_api" "api_gateway_template" {
  name          = "sonar_${var.gateway_name}_gateway_http_api"
  protocol_type = "HTTP"
  cors_configuration {
    allow_headers = ["Content-Type", "X-Amz-Date", "Authorization", "X-Api-Key", "X-Amz-Security-Token"]
    allow_methods = ["GET", "OPTIONS", "POST", "PUT"]
    allow_origins = ["*"]
  }
}

resource "aws_apigatewayv2_stage" "stage_template" {
  api_id        = aws_apigatewayv2_api.api_gateway_template.id
  name          = var.environment
  deployment_id = aws_apigatewayv2_deployment.http_deploy_template.id

  default_route_settings {
    logging_level          = "INFO"
    throttling_rate_limit  = 1000
    throttling_burst_limit = 1000
  }

  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.http_gateway_logs_template.arn
    # JSON log format so that inside cloudwatch, the available values can be inferred when querying
    format = jsonencode({
      requestId : "$context.requestId",
      ip : "$context.identity.sourceIp",
      caller : "$context.identity.caller",
      # email is used for the sign in call only since it validates with olive jwt
      email : "$context.authorizer.email",
      # userID is the userID parsed from the sonar token generated by cognito, and should be included in all other api calls
      userID : "$context.authorizer.userID",
      user : "$context.identity.user",
      requestTime : "$context.requestTime",
      httpMethod : "$context.httpMethod",
      resourcePath : "$context.resourcePath",
      path : "$context.path",
      status : "$context.status",
      protocol : "$context.protocol",
      responseLength : "$context.responseLength",
      authorizerError : "$context.authorizer.error",
      errorMessage : "$context.error.message",
      integrationError : "$context.integration.error",
    })
  }
}

resource "aws_apigatewayv2_deployment" "http_deploy_template" {
  api_id = aws_apigatewayv2_api.api_gateway_template.id

  lifecycle {
    create_before_destroy = true
  }

  triggers = {
    redeployment = sha1(join(",", var.deployment_triggers))
  }
}

resource "aws_apigatewayv2_api_mapping" "apigatewayv2_api_mapping_template" {
  api_id          = aws_apigatewayv2_api.api_gateway_template.id
  domain_name     = var.domain_name
  stage           = aws_apigatewayv2_stage.stage_template.id
  api_mapping_key = var.api_mapping_key
}