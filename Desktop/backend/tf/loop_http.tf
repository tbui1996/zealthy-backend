# Give CloudWatch Log Group KMS permission
# https://github.com/hashicorp/terraform-provider-aws/issues/8042
# https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html
# https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kms_key#policy
locals {
  http_loop_gateway_logs_name               = "sonar_loop_gateway_http_api_logs"
  http_loop_gateway_logs_kms_key_alias_name = "alias/http_loop_gateway_logs_kms_key"
}


resource "aws_kms_key" "http_loop_gateway_logs_kms_key" {
  description             = "KMS key for sonar_loop_gateway_http_api_logs CloudWatch log group"
  deletion_window_in_days = 10
  enable_key_rotation     = true
  policy                  = data.aws_iam_policy_document.http_loop_gateway_logs_kms_key_document.json
}

resource "aws_kms_alias" "http_loop_gateway_logs_kms_key" {
  name          = local.http_loop_gateway_logs_kms_key_alias_name
  target_key_id = aws_kms_key.http_loop_gateway_logs_kms_key.id
}

data "aws_iam_policy_document" "http_loop_gateway_logs_kms_key_document" {
  policy_id = "sonar-loop-gateway-http-api-logs-kms-key"
  statement {
    sid = "Enable IAM User Permissions"
    principals {
      identifiers = ["arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"]
      type        = "AWS"
    }
    actions   = ["kms:*"]
    resources = ["*"]
  }

  statement {
    sid = "Enable key to be used only with Cloud Watch Log"
    principals {
      identifiers = ["logs.${data.aws_region.current.name}.amazonaws.com"]
      type        = "Service"
    }
    actions = [
      "kms:Encrypt*",
      "kms:Decrypt*",
      "kms:ReEncryptTo",
      "kms:ReEncryptFrom",
      "kms:GenerateDataKey*",
      "kms:Describe*"
    ]
    resources = ["*"]
    condition {
      test     = "ArnEquals"
      variable = "kms:EncryptionContext:aws:logs:arn"
      values   = ["arn:aws:logs:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:log-group:${local.http_loop_gateway_logs_name}"]
    }
  }
}

resource "aws_cloudwatch_log_group" "http_loop_gateway_logs" {
  name       = local.http_loop_gateway_logs_name
  kms_key_id = aws_kms_key.http_loop_gateway_logs_kms_key.arn
}

resource "aws_apigatewayv2_api" "loop_gateway" {
  name          = "sonar_loop_gateway_http_api"
  protocol_type = "HTTP"
  cors_configuration {
    allow_headers = ["Content-Type", "X-Amz-Date", "Authorization", "X-Api-Key", "X-Amz-Security-Token"]
    allow_methods = ["GET", "OPTIONS", "POST", "PUT"]
    allow_origins = ["*"]
  }
}

resource "aws_apigatewayv2_stage" "loop_v1" {
  api_id        = aws_apigatewayv2_api.loop_gateway.id
  name          = var.environment
  deployment_id = aws_apigatewayv2_deployment.loop_http_deploy.id

  default_route_settings {
    logging_level          = "INFO"
    throttling_rate_limit  = 1000
    throttling_burst_limit = 1000
  }

  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.http_loop_gateway_logs.arn
    # JSON log format so that inside cloudwatch, the available values can be inferred when querying
    format = jsonencode({
      requestId : "$context.requestId",
      ip : "$context.identity.sourceIp",
      caller : "$context.identity.caller",
      # email is used for the sign in call only since it validates with olive jwt
      email : "$context.authorizer.email",
      # userID is the userID parsed from the sonar token generated by cognito, and should be included in all other api calls
      userID : "$context.authorizer.userID",
      user : "$context.identity.user",
      requestTime : "$context.requestTime",
      httpMethod : "$context.httpMethod",
      resourcePath : "$context.resourcePath",
      path : "$context.path",
      status : "$context.status",
      protocol : "$context.protocol",
      responseLength : "$context.responseLength",
      authorizerError : "$context.authorizer.error",
      errorMessage : "$context.error.message",
      integrationError : "$context.integration.error",
    })
  }
}

resource "aws_apigatewayv2_deployment" "loop_http_deploy" {
  api_id = aws_apigatewayv2_api.loop_gateway.id

  lifecycle {
    create_before_destroy = true
  }

  triggers = {
    redeployment = sha1(join(",", [
      // routes
      jsonencode(module.support_loop_pending_chat_session),
      jsonencode(module.support_loop_chat_messages_get),
      jsonencode(module.support_loop_chat_sessions_get),
      jsonencode(module.support_loop_send_route),
      jsonencode(module.support_loop_send_route),
      jsonencode(module.cloud_file_upload_loop),
      jsonencode(module.cloud_file_download_loop),
      jsonencode(module.users_external_sign_in),
      jsonencode(module.users_external_sign_up),
      jsonencode(module.users_external_refresh),
      jsonencode(module.support_submit_feedback),
      jsonencode(module.support_loop_patients_get),
      jsonencode(module.support_chat_session_star),
    ]))
  }
}

module "route53_configuration_loop_api" {
  source         = "./modules/certificate-generator"
  api_id         = aws_apigatewayv2_api.loop_gateway.id
  domain_name    = var.domain_name
  domain_prefix  = "loop-api"
  environment    = var.environment
  product_domain = "Sonar Loop Gateway HTTP"
  set_identifier = "api-sonar-loop_gateway-${var.environment}"
  stage_id       = aws_apigatewayv2_stage.loop_v1.id
  hosted_zone_id = var.hosted_zone_id
}
